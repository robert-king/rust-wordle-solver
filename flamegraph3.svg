<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="723"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.14%)</title><rect x="0.0000%" y="581" width="0.1383%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.14%)</title><rect x="0.0000%" y="565" width="0.1383%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.14%)</title><rect x="0.1383%" y="437" width="0.1383%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3883%" y="447.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.14%)</title><rect x="0.1383%" y="421" width="0.1383%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.3883%" y="431.50"></text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::for_each (1 samples, 0.14%)</title><rect x="0.1383%" y="405" width="0.1383%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.3883%" y="415.50"></text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::fold (1 samples, 0.14%)</title><rect x="0.1383%" y="389" width="0.1383%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.3883%" y="399.50"></text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.14%)</title><rect x="0.1383%" y="373" width="0.1383%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.3883%" y="383.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend::_{{closure}} (1 samples, 0.14%)</title><rect x="0.1383%" y="357" width="0.1383%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.3883%" y="367.50"></text></g><g><title>rust-wordle-solver`&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.14%)</title><rect x="0.2766%" y="325" width="0.1383%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.5266%" y="335.50"></text></g><g><title>rust-wordle-solver`core::ptr::const_ptr::_&lt;impl *const T&gt;::guaranteed_eq (1 samples, 0.14%)</title><rect x="1.7981%" y="293" width="0.1383%" height="15" fill="rgb(220,122,19)" fg:x="13" fg:w="1"/><text x="2.0481%" y="303.50"></text></g><g><title>rust-wordle-solver`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 1.52%)</title><rect x="0.5533%" y="309" width="1.5214%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="11"/><text x="0.8033%" y="319.50"></text></g><g><title>rust-wordle-solver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.14%)</title><rect x="1.9364%" y="293" width="0.1383%" height="15" fill="rgb(240,193,28)" fg:x="14" fg:w="1"/><text x="2.1864%" y="303.50"></text></g><g><title>rust-wordle-solver`core::ptr::metadata::from_raw_parts_mut (1 samples, 0.14%)</title><rect x="4.8409%" y="197" width="0.1383%" height="15" fill="rgb(216,20,37)" fg:x="35" fg:w="1"/><text x="5.0909%" y="207.50"></text></g><g><title>rust-wordle-solver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (2 samples, 0.28%)</title><rect x="4.9793%" y="197" width="0.2766%" height="15" fill="rgb(206,188,39)" fg:x="36" fg:w="2"/><text x="5.2293%" y="207.50"></text></g><g><title>rust-wordle-solver`alloc::vec::Vec&lt;T,A&gt;::as_ptr (5 samples, 0.69%)</title><rect x="4.8409%" y="213" width="0.6916%" height="15" fill="rgb(217,207,13)" fg:x="35" fg:w="5"/><text x="5.0909%" y="223.50"></text></g><g><title>rust-wordle-solver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.28%)</title><rect x="5.2559%" y="197" width="0.2766%" height="15" fill="rgb(231,73,38)" fg:x="38" fg:w="2"/><text x="5.5059%" y="207.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.97%)</title><rect x="4.7026%" y="229" width="0.9682%" height="15" fill="rgb(225,20,46)" fg:x="34" fg:w="7"/><text x="4.9526%" y="239.50"></text></g><g><title>rust-wordle-solver`core::slice::raw::from_raw_parts (1 samples, 0.14%)</title><rect x="5.5325%" y="213" width="0.1383%" height="15" fill="rgb(210,31,41)" fg:x="40" fg:w="1"/><text x="5.7825%" y="223.50"></text></g><g><title>rust-wordle-solver`core::ptr::const_ptr::_&lt;impl *const T&gt;::cast (1 samples, 0.14%)</title><rect x="5.5325%" y="197" width="0.1383%" height="15" fill="rgb(221,200,47)" fg:x="40" fg:w="1"/><text x="5.7825%" y="207.50"></text></g><g><title>rust-wordle-solver`core::iter::adapters::cloned::clone_try_fold::_{{closure}} (27 samples, 3.73%)</title><rect x="2.0747%" y="309" width="3.7344%" height="15" fill="rgb(226,26,5)" fg:x="15" fg:w="27"/><text x="2.3247%" y="319.50">rust..</text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::find::check::_{{closure}} (24 samples, 3.32%)</title><rect x="2.4896%" y="293" width="3.3195%" height="15" fill="rgb(249,33,26)" fg:x="18" fg:w="24"/><text x="2.7396%" y="303.50">rus..</text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (20 samples, 2.77%)</title><rect x="3.0429%" y="277" width="2.7663%" height="15" fill="rgb(235,183,28)" fg:x="22" fg:w="20"/><text x="3.2929%" y="287.50">ru..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess::_{{closure}} (19 samples, 2.63%)</title><rect x="3.1812%" y="261" width="2.6279%" height="15" fill="rgb(221,5,38)" fg:x="23" fg:w="19"/><text x="3.4312%" y="271.50">ru..</text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (10 samples, 1.38%)</title><rect x="4.4260%" y="245" width="1.3831%" height="15" fill="rgb(247,18,42)" fg:x="32" fg:w="10"/><text x="4.6760%" y="255.50"></text></g><g><title>rust-wordle-solver`core::slice::index::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.14%)</title><rect x="5.6708%" y="229" width="0.1383%" height="15" fill="rgb(241,131,45)" fg:x="41" fg:w="1"/><text x="5.9208%" y="239.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (41 samples, 5.67%)</title><rect x="0.2766%" y="421" width="5.6708%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="41"/><text x="0.5266%" y="431.50">rust-wo..</text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (41 samples, 5.67%)</title><rect x="0.2766%" y="405" width="5.6708%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="41"/><text x="0.5266%" y="415.50">rust-wo..</text></g><g><title>rust-wordle-solver`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (41 samples, 5.67%)</title><rect x="0.2766%" y="389" width="5.6708%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="41"/><text x="0.5266%" y="399.50">rust-wo..</text></g><g><title>rust-wordle-solver`&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 5.67%)</title><rect x="0.2766%" y="373" width="5.6708%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="41"/><text x="0.5266%" y="383.50">rust-wo..</text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::find (41 samples, 5.67%)</title><rect x="0.2766%" y="357" width="5.6708%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="41"/><text x="0.5266%" y="367.50">rust-wo..</text></g><g><title>rust-wordle-solver`&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (41 samples, 5.67%)</title><rect x="0.2766%" y="341" width="5.6708%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="41"/><text x="0.5266%" y="351.50">rust-wo..</text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::try_fold (40 samples, 5.53%)</title><rect x="0.4149%" y="325" width="5.5325%" height="15" fill="rgb(229,88,8)" fg:x="3" fg:w="40"/><text x="0.6649%" y="335.50">rust-wo..</text></g><g><title>rust-wordle-solver`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.14%)</title><rect x="5.8091%" y="309" width="0.1383%" height="15" fill="rgb(213,181,19)" fg:x="42" fg:w="1"/><text x="6.0591%" y="319.50"></text></g><g><title>rust-wordle-solver`alloc::vec::Vec&lt;T,A&gt;::clear (1 samples, 0.14%)</title><rect x="5.9474%" y="421" width="0.1383%" height="15" fill="rgb(254,191,54)" fg:x="43" fg:w="1"/><text x="6.1974%" y="431.50"></text></g><g><title>rust-wordle-solver`alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (1 samples, 0.14%)</title><rect x="5.9474%" y="405" width="0.1383%" height="15" fill="rgb(241,83,37)" fg:x="43" fg:w="1"/><text x="6.1974%" y="415.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.14%)</title><rect x="5.9474%" y="389" width="0.1383%" height="15" fill="rgb(233,36,39)" fg:x="43" fg:w="1"/><text x="6.1974%" y="399.50"></text></g><g><title>rust-wordle-solver`core::slice::raw::from_raw_parts_mut (1 samples, 0.14%)</title><rect x="5.9474%" y="373" width="0.1383%" height="15" fill="rgb(226,3,54)" fg:x="43" fg:w="1"/><text x="6.1974%" y="383.50"></text></g><g><title>rust-wordle-solver`core::ptr::slice_from_raw_parts_mut (1 samples, 0.14%)</title><rect x="5.9474%" y="357" width="0.1383%" height="15" fill="rgb(245,192,40)" fg:x="43" fg:w="1"/><text x="6.1974%" y="367.50"></text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::cloned (1 samples, 0.14%)</title><rect x="6.0858%" y="421" width="0.1383%" height="15" fill="rgb(238,167,29)" fg:x="44" fg:w="1"/><text x="6.3358%" y="431.50"></text></g><g><title>rust-wordle-solver`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (1 samples, 0.14%)</title><rect x="6.5007%" y="325" width="0.1383%" height="15" fill="rgb(232,182,51)" fg:x="47" fg:w="1"/><text x="6.7507%" y="335.50"></text></g><g><title>rust-wordle-solver`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.28%)</title><rect x="6.5007%" y="341" width="0.2766%" height="15" fill="rgb(231,60,39)" fg:x="47" fg:w="2"/><text x="6.7507%" y="351.50"></text></g><g><title>rust-wordle-solver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.14%)</title><rect x="6.6390%" y="325" width="0.1383%" height="15" fill="rgb(208,69,12)" fg:x="48" fg:w="1"/><text x="6.8890%" y="335.50"></text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::sum (5 samples, 0.69%)</title><rect x="6.2241%" y="405" width="0.6916%" height="15" fill="rgb(235,93,37)" fg:x="45" fg:w="5"/><text x="6.4741%" y="415.50"></text></g><g><title>rust-wordle-solver`&lt;u64 as core::iter::traits::accum::Sum&gt;::sum (5 samples, 0.69%)</title><rect x="6.2241%" y="389" width="0.6916%" height="15" fill="rgb(213,116,39)" fg:x="45" fg:w="5"/><text x="6.4741%" y="399.50"></text></g><g><title>rust-wordle-solver`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.69%)</title><rect x="6.2241%" y="373" width="0.6916%" height="15" fill="rgb(222,207,29)" fg:x="45" fg:w="5"/><text x="6.4741%" y="383.50"></text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::fold (4 samples, 0.55%)</title><rect x="6.3624%" y="357" width="0.5533%" height="15" fill="rgb(206,96,30)" fg:x="46" fg:w="4"/><text x="6.6124%" y="367.50"></text></g><g><title>rust-wordle-solver`core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.14%)</title><rect x="6.7773%" y="341" width="0.1383%" height="15" fill="rgb(218,138,4)" fg:x="49" fg:w="1"/><text x="7.0273%" y="351.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_next_guess::_{{closure}} (1 samples, 0.14%)</title><rect x="6.7773%" y="325" width="0.1383%" height="15" fill="rgb(250,191,14)" fg:x="49" fg:w="1"/><text x="7.0273%" y="335.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.14%)</title><rect x="6.7773%" y="309" width="0.1383%" height="15" fill="rgb(239,60,40)" fg:x="49" fg:w="1"/><text x="7.0273%" y="319.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.14%)</title><rect x="6.7773%" y="293" width="0.1383%" height="15" fill="rgb(206,27,48)" fg:x="49" fg:w="1"/><text x="7.0273%" y="303.50"></text></g><g><title>rust-wordle-solver`alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.14%)</title><rect x="6.7773%" y="277" width="0.1383%" height="15" fill="rgb(225,35,8)" fg:x="49" fg:w="1"/><text x="7.0273%" y="287.50"></text></g><g><title>rust-wordle-solver`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.14%)</title><rect x="6.7773%" y="261" width="0.1383%" height="15" fill="rgb(250,213,24)" fg:x="49" fg:w="1"/><text x="7.0273%" y="271.50"></text></g><g><title>rust-wordle-solver`core::ptr::unique::Unique&lt;T&gt;::as_ptr (1 samples, 0.14%)</title><rect x="6.7773%" y="245" width="0.1383%" height="15" fill="rgb(247,123,22)" fg:x="49" fg:w="1"/><text x="7.0273%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.14%)</title><rect x="7.0539%" y="373" width="0.1383%" height="15" fill="rgb(231,138,38)" fg:x="51" fg:w="1"/><text x="7.3039%" y="383.50"></text></g><g><title>rust-wordle-solver`&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.14%)</title><rect x="7.1923%" y="373" width="0.1383%" height="15" fill="rgb(231,145,46)" fg:x="52" fg:w="1"/><text x="7.4423%" y="383.50"></text></g><g><title>rust-wordle-solver`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (4 samples, 0.55%)</title><rect x="8.7137%" y="261" width="0.5533%" height="15" fill="rgb(251,118,11)" fg:x="63" fg:w="4"/><text x="8.9637%" y="271.50"></text></g><g><title>rust-wordle-solver`core::ptr::metadata::from_raw_parts (1 samples, 0.14%)</title><rect x="9.2669%" y="261" width="0.1383%" height="15" fill="rgb(217,147,25)" fg:x="67" fg:w="1"/><text x="9.5169%" y="271.50"></text></g><g><title>rust-wordle-solver`core::ptr::metadata::from_raw_parts_mut (1 samples, 0.14%)</title><rect x="9.4053%" y="261" width="0.1383%" height="15" fill="rgb(247,81,37)" fg:x="68" fg:w="1"/><text x="9.6553%" y="271.50"></text></g><g><title>rust-wordle-solver`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 2.21%)</title><rect x="7.6072%" y="277" width="2.2130%" height="15" fill="rgb(209,12,38)" fg:x="55" fg:w="16"/><text x="7.8572%" y="287.50">r..</text></g><g><title>rust-wordle-solver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.28%)</title><rect x="9.5436%" y="261" width="0.2766%" height="15" fill="rgb(227,1,9)" fg:x="69" fg:w="2"/><text x="9.7936%" y="271.50"></text></g><g><title>rust-wordle-solver`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.14%)</title><rect x="12.3098%" y="165" width="0.1383%" height="15" fill="rgb(248,47,43)" fg:x="89" fg:w="1"/><text x="12.5598%" y="175.50"></text></g><g><title>rust-wordle-solver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.14%)</title><rect x="12.4481%" y="165" width="0.1383%" height="15" fill="rgb(221,10,30)" fg:x="90" fg:w="1"/><text x="12.6981%" y="175.50"></text></g><g><title>rust-wordle-solver`alloc::vec::Vec&lt;T,A&gt;::as_ptr (8 samples, 1.11%)</title><rect x="11.8949%" y="181" width="1.1065%" height="15" fill="rgb(210,229,1)" fg:x="86" fg:w="8"/><text x="12.1449%" y="191.50"></text></g><g><title>rust-wordle-solver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (3 samples, 0.41%)</title><rect x="12.5864%" y="165" width="0.4149%" height="15" fill="rgb(222,148,37)" fg:x="91" fg:w="3"/><text x="12.8364%" y="175.50"></text></g><g><title>rust-wordle-solver`core::ptr::const_ptr::_&lt;impl *const T&gt;::cast (2 samples, 0.28%)</title><rect x="13.1397%" y="165" width="0.2766%" height="15" fill="rgb(234,67,33)" fg:x="95" fg:w="2"/><text x="13.3897%" y="175.50"></text></g><g><title>rust-wordle-solver`core::ptr::metadata::from_raw_parts (1 samples, 0.14%)</title><rect x="13.4163%" y="165" width="0.1383%" height="15" fill="rgb(247,98,35)" fg:x="97" fg:w="1"/><text x="13.6663%" y="175.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 1.94%)</title><rect x="11.7566%" y="197" width="1.9364%" height="15" fill="rgb(247,138,52)" fg:x="85" fg:w="14"/><text x="12.0066%" y="207.50">r..</text></g><g><title>rust-wordle-solver`core::slice::raw::from_raw_parts (5 samples, 0.69%)</title><rect x="13.0014%" y="181" width="0.6916%" height="15" fill="rgb(213,79,30)" fg:x="94" fg:w="5"/><text x="13.2514%" y="191.50"></text></g><g><title>rust-wordle-solver`core::ptr::slice_from_raw_parts (1 samples, 0.14%)</title><rect x="13.5546%" y="165" width="0.1383%" height="15" fill="rgb(246,177,23)" fg:x="98" fg:w="1"/><text x="13.8046%" y="175.50"></text></g><g><title>rust-wordle-solver`core::iter::adapters::cloned::clone_try_fold::_{{closure}} (30 samples, 4.15%)</title><rect x="9.8202%" y="277" width="4.1494%" height="15" fill="rgb(230,62,27)" fg:x="71" fg:w="30"/><text x="10.0702%" y="287.50">rust-..</text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::find::check::_{{closure}} (29 samples, 4.01%)</title><rect x="9.9585%" y="261" width="4.0111%" height="15" fill="rgb(216,154,8)" fg:x="72" fg:w="29"/><text x="10.2085%" y="271.50">rust..</text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (24 samples, 3.32%)</title><rect x="10.6501%" y="245" width="3.3195%" height="15" fill="rgb(244,35,45)" fg:x="77" fg:w="24"/><text x="10.9001%" y="255.50">rus..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess::_{{closure}} (24 samples, 3.32%)</title><rect x="10.6501%" y="229" width="3.3195%" height="15" fill="rgb(251,115,12)" fg:x="77" fg:w="24"/><text x="10.9001%" y="239.50">rus..</text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (17 samples, 2.35%)</title><rect x="11.6183%" y="213" width="2.3513%" height="15" fill="rgb(240,54,50)" fg:x="84" fg:w="17"/><text x="11.8683%" y="223.50">r..</text></g><g><title>rust-wordle-solver`core::slice::index::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.28%)</title><rect x="13.6929%" y="197" width="0.2766%" height="15" fill="rgb(233,84,52)" fg:x="99" fg:w="2"/><text x="13.9429%" y="207.50"></text></g><g><title>rust-wordle-solver`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.14%)</title><rect x="13.8313%" y="181" width="0.1383%" height="15" fill="rgb(207,117,47)" fg:x="100" fg:w="1"/><text x="14.0813%" y="191.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (51 samples, 7.05%)</title><rect x="7.0539%" y="389" width="7.0539%" height="15" fill="rgb(249,43,39)" fg:x="51" fg:w="51"/><text x="7.3039%" y="399.50">rust-word..</text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (49 samples, 6.78%)</title><rect x="7.3306%" y="373" width="6.7773%" height="15" fill="rgb(209,38,44)" fg:x="53" fg:w="49"/><text x="7.5806%" y="383.50">rust-word..</text></g><g><title>rust-wordle-solver`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (49 samples, 6.78%)</title><rect x="7.3306%" y="357" width="6.7773%" height="15" fill="rgb(236,212,23)" fg:x="53" fg:w="49"/><text x="7.5806%" y="367.50">rust-word..</text></g><g><title>rust-wordle-solver`&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 6.78%)</title><rect x="7.3306%" y="341" width="6.7773%" height="15" fill="rgb(242,79,21)" fg:x="53" fg:w="49"/><text x="7.5806%" y="351.50">rust-word..</text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::find (49 samples, 6.78%)</title><rect x="7.3306%" y="325" width="6.7773%" height="15" fill="rgb(211,96,35)" fg:x="53" fg:w="49"/><text x="7.5806%" y="335.50">rust-word..</text></g><g><title>rust-wordle-solver`&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (49 samples, 6.78%)</title><rect x="7.3306%" y="309" width="6.7773%" height="15" fill="rgb(253,215,40)" fg:x="53" fg:w="49"/><text x="7.5806%" y="319.50">rust-word..</text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::try_fold (49 samples, 6.78%)</title><rect x="7.3306%" y="293" width="6.7773%" height="15" fill="rgb(211,81,21)" fg:x="53" fg:w="49"/><text x="7.5806%" y="303.50">rust-word..</text></g><g><title>rust-wordle-solver`core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.14%)</title><rect x="13.9696%" y="277" width="0.1383%" height="15" fill="rgb(208,190,38)" fg:x="101" fg:w="1"/><text x="14.2196%" y="287.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.14%)</title><rect x="14.1079%" y="389" width="0.1383%" height="15" fill="rgb(235,213,38)" fg:x="102" fg:w="1"/><text x="14.3579%" y="399.50"></text></g><g><title>rust-wordle-solver`alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.14%)</title><rect x="14.1079%" y="373" width="0.1383%" height="15" fill="rgb(237,122,38)" fg:x="102" fg:w="1"/><text x="14.3579%" y="383.50"></text></g><g><title>rust-wordle-solver`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.14%)</title><rect x="14.1079%" y="357" width="0.1383%" height="15" fill="rgb(244,218,35)" fg:x="102" fg:w="1"/><text x="14.3579%" y="367.50"></text></g><g><title>rust-wordle-solver`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.28%)</title><rect x="14.2462%" y="389" width="0.2766%" height="15" fill="rgb(240,68,47)" fg:x="103" fg:w="2"/><text x="14.4962%" y="399.50"></text></g><g><title>rust-wordle-solver`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.14%)</title><rect x="14.5228%" y="341" width="0.1383%" height="15" fill="rgb(210,16,53)" fg:x="105" fg:w="1"/><text x="14.7728%" y="351.50"></text></g><g><title>rust-wordle-solver`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.14%)</title><rect x="14.5228%" y="325" width="0.1383%" height="15" fill="rgb(235,124,12)" fg:x="105" fg:w="1"/><text x="14.7728%" y="335.50"></text></g><g><title>rust-wordle-solver`core::ptr::unique::Unique&lt;T&gt;::as_ptr (1 samples, 0.14%)</title><rect x="14.5228%" y="309" width="0.1383%" height="15" fill="rgb(224,169,11)" fg:x="105" fg:w="1"/><text x="14.7728%" y="319.50"></text></g><g><title>rust-wordle-solver`alloc::vec::Vec&lt;T,A&gt;::clear (2 samples, 0.28%)</title><rect x="14.5228%" y="389" width="0.2766%" height="15" fill="rgb(250,166,2)" fg:x="105" fg:w="2"/><text x="14.7728%" y="399.50"></text></g><g><title>rust-wordle-solver`alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (2 samples, 0.28%)</title><rect x="14.5228%" y="373" width="0.2766%" height="15" fill="rgb(242,216,29)" fg:x="105" fg:w="2"/><text x="14.7728%" y="383.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.28%)</title><rect x="14.5228%" y="357" width="0.2766%" height="15" fill="rgb(230,116,27)" fg:x="105" fg:w="2"/><text x="14.7728%" y="367.50"></text></g><g><title>rust-wordle-solver`core::slice::raw::from_raw_parts_mut (1 samples, 0.14%)</title><rect x="14.6611%" y="341" width="0.1383%" height="15" fill="rgb(228,99,48)" fg:x="106" fg:w="1"/><text x="14.9111%" y="351.50"></text></g><g><title>rust-wordle-solver`core::ptr::metadata::from_raw_parts_mut (1 samples, 0.14%)</title><rect x="14.6611%" y="325" width="0.1383%" height="15" fill="rgb(253,11,6)" fg:x="106" fg:w="1"/><text x="14.9111%" y="335.50"></text></g><g><title>rust-wordle-solver`alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.14%)</title><rect x="14.7994%" y="389" width="0.1383%" height="15" fill="rgb(247,143,39)" fg:x="107" fg:w="1"/><text x="15.0494%" y="399.50"></text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::filter (1 samples, 0.14%)</title><rect x="14.9378%" y="389" width="0.1383%" height="15" fill="rgb(236,97,10)" fg:x="108" fg:w="1"/><text x="15.1878%" y="399.50"></text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::sum (1 samples, 0.14%)</title><rect x="15.0761%" y="373" width="0.1383%" height="15" fill="rgb(233,208,19)" fg:x="109" fg:w="1"/><text x="15.3261%" y="383.50"></text></g><g><title>rust-wordle-solver`&lt;u64 as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.14%)</title><rect x="15.0761%" y="357" width="0.1383%" height="15" fill="rgb(216,164,2)" fg:x="109" fg:w="1"/><text x="15.3261%" y="367.50"></text></g><g><title>rust-wordle-solver`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.14%)</title><rect x="15.0761%" y="341" width="0.1383%" height="15" fill="rgb(220,129,5)" fg:x="109" fg:w="1"/><text x="15.3261%" y="351.50"></text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::fold (1 samples, 0.14%)</title><rect x="15.0761%" y="325" width="0.1383%" height="15" fill="rgb(242,17,10)" fg:x="109" fg:w="1"/><text x="15.3261%" y="335.50"></text></g><g><title>rust-wordle-solver`core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.14%)</title><rect x="15.0761%" y="309" width="0.1383%" height="15" fill="rgb(242,107,0)" fg:x="109" fg:w="1"/><text x="15.3261%" y="319.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_next_guess::_{{closure}} (1 samples, 0.14%)</title><rect x="15.0761%" y="293" width="0.1383%" height="15" fill="rgb(251,28,31)" fg:x="109" fg:w="1"/><text x="15.3261%" y="303.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.14%)</title><rect x="15.0761%" y="277" width="0.1383%" height="15" fill="rgb(233,223,10)" fg:x="109" fg:w="1"/><text x="15.3261%" y="287.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.14%)</title><rect x="15.0761%" y="261" width="0.1383%" height="15" fill="rgb(215,21,27)" fg:x="109" fg:w="1"/><text x="15.3261%" y="271.50"></text></g><g><title>rust-wordle-solver`core::slice::raw::from_raw_parts (1 samples, 0.14%)</title><rect x="15.0761%" y="245" width="0.1383%" height="15" fill="rgb(232,23,21)" fg:x="109" fg:w="1"/><text x="15.3261%" y="255.50"></text></g><g><title>rust-wordle-solver`core::ptr::slice_from_raw_parts (1 samples, 0.14%)</title><rect x="15.0761%" y="229" width="0.1383%" height="15" fill="rgb(244,5,23)" fg:x="109" fg:w="1"/><text x="15.3261%" y="239.50"></text></g><g><title>rust-wordle-solver`&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.14%)</title><rect x="15.4910%" y="261" width="0.1383%" height="15" fill="rgb(226,81,46)" fg:x="112" fg:w="1"/><text x="15.7410%" y="271.50"></text></g><g><title>rust-wordle-solver`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="15.6293%" y="245" width="0.1383%" height="15" fill="rgb(247,70,30)" fg:x="113" fg:w="1"/><text x="15.8793%" y="255.50"></text></g><g><title>rust-wordle-solver`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (1 samples, 0.14%)</title><rect x="15.6293%" y="229" width="0.1383%" height="15" fill="rgb(212,68,19)" fg:x="113" fg:w="1"/><text x="15.8793%" y="239.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (6 samples, 0.83%)</title><rect x="15.3527%" y="357" width="0.8299%" height="15" fill="rgb(240,187,13)" fg:x="111" fg:w="6"/><text x="15.6027%" y="367.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 0.83%)</title><rect x="15.3527%" y="341" width="0.8299%" height="15" fill="rgb(223,113,26)" fg:x="111" fg:w="6"/><text x="15.6027%" y="351.50"></text></g><g><title>rust-wordle-solver`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (6 samples, 0.83%)</title><rect x="15.3527%" y="325" width="0.8299%" height="15" fill="rgb(206,192,2)" fg:x="111" fg:w="6"/><text x="15.6027%" y="335.50"></text></g><g><title>rust-wordle-solver`&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.83%)</title><rect x="15.3527%" y="309" width="0.8299%" height="15" fill="rgb(241,108,4)" fg:x="111" fg:w="6"/><text x="15.6027%" y="319.50"></text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::find (6 samples, 0.83%)</title><rect x="15.3527%" y="293" width="0.8299%" height="15" fill="rgb(247,173,49)" fg:x="111" fg:w="6"/><text x="15.6027%" y="303.50"></text></g><g><title>rust-wordle-solver`&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.69%)</title><rect x="15.4910%" y="277" width="0.6916%" height="15" fill="rgb(224,114,35)" fg:x="112" fg:w="5"/><text x="15.7410%" y="287.50"></text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::try_fold (4 samples, 0.55%)</title><rect x="15.6293%" y="261" width="0.5533%" height="15" fill="rgb(245,159,27)" fg:x="113" fg:w="4"/><text x="15.8793%" y="271.50"></text></g><g><title>rust-wordle-solver`core::iter::adapters::cloned::clone_try_fold::_{{closure}} (3 samples, 0.41%)</title><rect x="15.7676%" y="245" width="0.4149%" height="15" fill="rgb(245,172,44)" fg:x="114" fg:w="3"/><text x="16.0176%" y="255.50"></text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::find::check::_{{closure}} (3 samples, 0.41%)</title><rect x="15.7676%" y="229" width="0.4149%" height="15" fill="rgb(236,23,11)" fg:x="114" fg:w="3"/><text x="16.0176%" y="239.50"></text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.41%)</title><rect x="15.7676%" y="213" width="0.4149%" height="15" fill="rgb(205,117,38)" fg:x="114" fg:w="3"/><text x="16.0176%" y="223.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess::_{{closure}} (3 samples, 0.41%)</title><rect x="15.7676%" y="197" width="0.4149%" height="15" fill="rgb(237,72,25)" fg:x="114" fg:w="3"/><text x="16.0176%" y="207.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.28%)</title><rect x="15.9059%" y="181" width="0.2766%" height="15" fill="rgb(244,70,9)" fg:x="115" fg:w="2"/><text x="16.1559%" y="191.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.28%)</title><rect x="15.9059%" y="165" width="0.2766%" height="15" fill="rgb(217,125,39)" fg:x="115" fg:w="2"/><text x="16.1559%" y="175.50"></text></g><g><title>rust-wordle-solver`alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.14%)</title><rect x="16.0443%" y="149" width="0.1383%" height="15" fill="rgb(235,36,10)" fg:x="116" fg:w="1"/><text x="16.2943%" y="159.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (8 samples, 1.11%)</title><rect x="15.2144%" y="373" width="1.1065%" height="15" fill="rgb(251,123,47)" fg:x="110" fg:w="8"/><text x="15.4644%" y="383.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.14%)</title><rect x="16.1826%" y="357" width="0.1383%" height="15" fill="rgb(221,13,13)" fg:x="117" fg:w="1"/><text x="16.4326%" y="367.50"></text></g><g><title>rust-wordle-solver`core::slice::raw::from_raw_parts (1 samples, 0.14%)</title><rect x="16.1826%" y="341" width="0.1383%" height="15" fill="rgb(238,131,9)" fg:x="117" fg:w="1"/><text x="16.4326%" y="351.50"></text></g><g><title>rust-wordle-solver`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.14%)</title><rect x="16.3209%" y="293" width="0.1383%" height="15" fill="rgb(211,50,8)" fg:x="118" fg:w="1"/><text x="16.5709%" y="303.50"></text></g><g><title>rust-wordle-solver`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.14%)</title><rect x="16.3209%" y="277" width="0.1383%" height="15" fill="rgb(245,182,24)" fg:x="118" fg:w="1"/><text x="16.5709%" y="287.50"></text></g><g><title>rust-wordle-solver`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.14%)</title><rect x="16.3209%" y="261" width="0.1383%" height="15" fill="rgb(242,14,37)" fg:x="118" fg:w="1"/><text x="16.5709%" y="271.50"></text></g><g><title>rust-wordle-solver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.14%)</title><rect x="16.4592%" y="213" width="0.1383%" height="15" fill="rgb(246,228,12)" fg:x="119" fg:w="1"/><text x="16.7092%" y="223.50"></text></g><g><title>rust-wordle-solver`core::hash::sip::u8to64_le (1 samples, 0.14%)</title><rect x="16.4592%" y="197" width="0.1383%" height="15" fill="rgb(213,55,15)" fg:x="119" fg:w="1"/><text x="16.7092%" y="207.50"></text></g><g><title>rust-wordle-solver`hashbrown::map::make_hash (3 samples, 0.41%)</title><rect x="16.3209%" y="325" width="0.4149%" height="15" fill="rgb(209,9,3)" fg:x="118" fg:w="3"/><text x="16.5709%" y="335.50"></text></g><g><title>rust-wordle-solver`core::hash::BuildHasher::hash_one (3 samples, 0.41%)</title><rect x="16.3209%" y="309" width="0.4149%" height="15" fill="rgb(230,59,30)" fg:x="118" fg:w="3"/><text x="16.5709%" y="319.50"></text></g><g><title>rust-wordle-solver`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.28%)</title><rect x="16.4592%" y="293" width="0.2766%" height="15" fill="rgb(209,121,21)" fg:x="119" fg:w="2"/><text x="16.7092%" y="303.50"></text></g><g><title>rust-wordle-solver`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (2 samples, 0.28%)</title><rect x="16.4592%" y="277" width="0.2766%" height="15" fill="rgb(220,109,13)" fg:x="119" fg:w="2"/><text x="16.7092%" y="287.50"></text></g><g><title>rust-wordle-solver`core::hash::Hasher::write_u64 (2 samples, 0.28%)</title><rect x="16.4592%" y="261" width="0.2766%" height="15" fill="rgb(232,18,1)" fg:x="119" fg:w="2"/><text x="16.7092%" y="271.50"></text></g><g><title>rust-wordle-solver`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.28%)</title><rect x="16.4592%" y="245" width="0.2766%" height="15" fill="rgb(215,41,42)" fg:x="119" fg:w="2"/><text x="16.7092%" y="255.50"></text></g><g><title>rust-wordle-solver`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.28%)</title><rect x="16.4592%" y="229" width="0.2766%" height="15" fill="rgb(224,123,36)" fg:x="119" fg:w="2"/><text x="16.7092%" y="239.50"></text></g><g><title>rust-wordle-solver`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.14%)</title><rect x="16.5975%" y="213" width="0.1383%" height="15" fill="rgb(240,125,3)" fg:x="120" fg:w="1"/><text x="16.8475%" y="223.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.14%)</title><rect x="16.7358%" y="277" width="0.1383%" height="15" fill="rgb(205,98,50)" fg:x="121" fg:w="1"/><text x="16.9858%" y="287.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.14%)</title><rect x="16.7358%" y="261" width="0.1383%" height="15" fill="rgb(205,185,37)" fg:x="121" fg:w="1"/><text x="16.9858%" y="271.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.14%)</title><rect x="16.7358%" y="245" width="0.1383%" height="15" fill="rgb(238,207,15)" fg:x="121" fg:w="1"/><text x="16.9858%" y="255.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_one_guess (122 samples, 16.87%)</title><rect x="0.1383%" y="453" width="16.8741%" height="15" fill="rgb(213,199,42)" fg:x="1" fg:w="122"/><text x="0.3883%" y="463.50">rust-wordle-solver`rust_wo..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (121 samples, 16.74%)</title><rect x="0.2766%" y="437" width="16.7358%" height="15" fill="rgb(235,201,11)" fg:x="2" fg:w="121"/><text x="0.5266%" y="447.50">rust-wordle-solver`rust_wo..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_next_guess (78 samples, 10.79%)</title><rect x="6.2241%" y="421" width="10.7884%" height="15" fill="rgb(207,46,11)" fg:x="45" fg:w="78"/><text x="6.4741%" y="431.50">rust-wordle-solv..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (73 samples, 10.10%)</title><rect x="6.9156%" y="405" width="10.0968%" height="15" fill="rgb(241,35,35)" fg:x="50" fg:w="73"/><text x="7.1656%" y="415.50">rust-wordle-sol..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_next_guess (14 samples, 1.94%)</title><rect x="15.0761%" y="389" width="1.9364%" height="15" fill="rgb(243,32,47)" fg:x="109" fg:w="14"/><text x="15.3261%" y="399.50">r..</text></g><g><title>rust-wordle-solver`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (5 samples, 0.69%)</title><rect x="16.3209%" y="373" width="0.6916%" height="15" fill="rgb(247,202,23)" fg:x="118" fg:w="5"/><text x="16.5709%" y="383.50"></text></g><g><title>rust-wordle-solver`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5 samples, 0.69%)</title><rect x="16.3209%" y="357" width="0.6916%" height="15" fill="rgb(219,102,11)" fg:x="118" fg:w="5"/><text x="16.5709%" y="367.50"></text></g><g><title>rust-wordle-solver`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 0.69%)</title><rect x="16.3209%" y="341" width="0.6916%" height="15" fill="rgb(243,110,44)" fg:x="118" fg:w="5"/><text x="16.5709%" y="351.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.28%)</title><rect x="16.7358%" y="325" width="0.2766%" height="15" fill="rgb(222,74,54)" fg:x="121" fg:w="2"/><text x="16.9858%" y="335.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.28%)</title><rect x="16.7358%" y="309" width="0.2766%" height="15" fill="rgb(216,99,12)" fg:x="121" fg:w="2"/><text x="16.9858%" y="319.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.28%)</title><rect x="16.7358%" y="293" width="0.2766%" height="15" fill="rgb(226,22,26)" fg:x="121" fg:w="2"/><text x="16.9858%" y="303.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::h2 (1 samples, 0.14%)</title><rect x="16.8741%" y="277" width="0.1383%" height="15" fill="rgb(217,163,10)" fg:x="122" fg:w="1"/><text x="17.1241%" y="287.50"></text></g><g><title>rust-wordle-solver`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.14%)</title><rect x="16.8741%" y="261" width="0.1383%" height="15" fill="rgb(213,25,53)" fg:x="122" fg:w="1"/><text x="17.1241%" y="271.50"></text></g><g><title>rust-wordle-solver`&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.41%)</title><rect x="18.3956%" y="421" width="0.4149%" height="15" fill="rgb(252,105,26)" fg:x="133" fg:w="3"/><text x="18.6456%" y="431.50"></text></g><g><title>rust-wordle-solver`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.14%)</title><rect x="18.9488%" y="373" width="0.1383%" height="15" fill="rgb(220,39,43)" fg:x="137" fg:w="1"/><text x="19.1988%" y="383.50"></text></g><g><title>rust-wordle-solver`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.14%)</title><rect x="18.9488%" y="357" width="0.1383%" height="15" fill="rgb(229,68,48)" fg:x="137" fg:w="1"/><text x="19.1988%" y="367.50"></text></g><g><title>rust-wordle-solver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.14%)</title><rect x="19.0871%" y="373" width="0.1383%" height="15" fill="rgb(252,8,32)" fg:x="138" fg:w="1"/><text x="19.3371%" y="383.50"></text></g><g><title>rust-wordle-solver`alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.41%)</title><rect x="18.9488%" y="389" width="0.4149%" height="15" fill="rgb(223,20,43)" fg:x="137" fg:w="3"/><text x="19.1988%" y="399.50"></text></g><g><title>rust-wordle-solver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (1 samples, 0.14%)</title><rect x="19.2254%" y="373" width="0.1383%" height="15" fill="rgb(229,81,49)" fg:x="139" fg:w="1"/><text x="19.4754%" y="383.50"></text></g><g><title>rust-wordle-solver`core::ptr::metadata::from_raw_parts_mut (1 samples, 0.14%)</title><rect x="19.3638%" y="373" width="0.1383%" height="15" fill="rgb(236,28,36)" fg:x="140" fg:w="1"/><text x="19.6138%" y="383.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (5 samples, 0.69%)</title><rect x="18.9488%" y="405" width="0.6916%" height="15" fill="rgb(249,185,26)" fg:x="137" fg:w="5"/><text x="19.1988%" y="415.50"></text></g><g><title>rust-wordle-solver`core::slice::raw::from_raw_parts_mut (2 samples, 0.28%)</title><rect x="19.3638%" y="389" width="0.2766%" height="15" fill="rgb(249,174,33)" fg:x="140" fg:w="2"/><text x="19.6138%" y="399.50"></text></g><g><title>rust-wordle-solver`core::ptr::slice_from_raw_parts_mut (1 samples, 0.14%)</title><rect x="19.5021%" y="373" width="0.1383%" height="15" fill="rgb(233,201,37)" fg:x="141" fg:w="1"/><text x="19.7521%" y="383.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (11 samples, 1.52%)</title><rect x="18.8105%" y="421" width="1.5214%" height="15" fill="rgb(221,78,26)" fg:x="136" fg:w="11"/><text x="19.0605%" y="431.50"></text></g><g><title>rust-wordle-solver`core::slice::index::_&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (5 samples, 0.69%)</title><rect x="19.6404%" y="405" width="0.6916%" height="15" fill="rgb(250,127,30)" fg:x="142" fg:w="5"/><text x="19.8904%" y="415.50"></text></g><g><title>rust-wordle-solver`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 0.41%)</title><rect x="19.9170%" y="389" width="0.4149%" height="15" fill="rgb(230,49,44)" fg:x="144" fg:w="3"/><text x="20.1670%" y="399.50"></text></g><g><title>rust-wordle-solver`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (1 samples, 0.14%)</title><rect x="21.4385%" y="389" width="0.1383%" height="15" fill="rgb(229,67,23)" fg:x="155" fg:w="1"/><text x="21.6885%" y="399.50"></text></g><g><title>rust-wordle-solver`core::ptr::metadata::from_raw_parts (1 samples, 0.14%)</title><rect x="21.5768%" y="389" width="0.1383%" height="15" fill="rgb(249,83,47)" fg:x="156" fg:w="1"/><text x="21.8268%" y="399.50"></text></g><g><title>rust-wordle-solver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.14%)</title><rect x="21.7151%" y="389" width="0.1383%" height="15" fill="rgb(215,43,3)" fg:x="157" fg:w="1"/><text x="21.9651%" y="399.50"></text></g><g><title>rust-wordle-solver`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 1.38%)</title><rect x="20.7469%" y="405" width="1.3831%" height="15" fill="rgb(238,154,13)" fg:x="150" fg:w="10"/><text x="20.9969%" y="415.50"></text></g><g><title>rust-wordle-solver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (2 samples, 0.28%)</title><rect x="21.8534%" y="389" width="0.2766%" height="15" fill="rgb(219,56,2)" fg:x="158" fg:w="2"/><text x="22.1034%" y="399.50"></text></g><g><title>rust-wordle-solver`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.28%)</title><rect x="22.1300%" y="405" width="0.2766%" height="15" fill="rgb(233,0,4)" fg:x="160" fg:w="2"/><text x="22.3800%" y="415.50"></text></g><g><title>rust-wordle-solver`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 2.21%)</title><rect x="20.3320%" y="421" width="2.2130%" height="15" fill="rgb(235,30,7)" fg:x="147" fg:w="16"/><text x="20.5820%" y="431.50">r..</text></g><g><title>rust-wordle-solver`core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.14%)</title><rect x="22.4066%" y="405" width="0.1383%" height="15" fill="rgb(250,79,13)" fg:x="162" fg:w="1"/><text x="22.6566%" y="415.50"></text></g><g><title>rust-wordle-solver`&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.28%)</title><rect x="22.5450%" y="421" width="0.2766%" height="15" fill="rgb(211,146,34)" fg:x="163" fg:w="2"/><text x="22.7950%" y="431.50"></text></g><g><title>rust-wordle-solver`core::ptr::const_ptr::_&lt;impl *const T&gt;::guaranteed_eq (3 samples, 0.41%)</title><rect x="42.6003%" y="373" width="0.4149%" height="15" fill="rgb(228,22,38)" fg:x="308" fg:w="3"/><text x="42.8503%" y="383.50"></text></g><g><title>rust-wordle-solver`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (22 samples, 3.04%)</title><rect x="43.0152%" y="373" width="3.0429%" height="15" fill="rgb(235,168,5)" fg:x="311" fg:w="22"/><text x="43.2652%" y="383.50">rus..</text></g><g><title>rust-wordle-solver`core::ptr::metadata::from_raw_parts (7 samples, 0.97%)</title><rect x="46.0581%" y="373" width="0.9682%" height="15" fill="rgb(221,155,16)" fg:x="333" fg:w="7"/><text x="46.3081%" y="383.50"></text></g><g><title>rust-wordle-solver`core::ptr::metadata::from_raw_parts_mut (2 samples, 0.28%)</title><rect x="47.0263%" y="373" width="0.2766%" height="15" fill="rgb(215,215,53)" fg:x="340" fg:w="2"/><text x="47.2763%" y="383.50"></text></g><g><title>rust-wordle-solver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (9 samples, 1.24%)</title><rect x="47.3029%" y="373" width="1.2448%" height="15" fill="rgb(223,4,10)" fg:x="342" fg:w="9"/><text x="47.5529%" y="383.50"></text></g><g><title>rust-wordle-solver`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (145 samples, 20.06%)</title><rect x="32.0885%" y="389" width="20.0553%" height="15" fill="rgb(234,103,6)" fg:x="232" fg:w="145"/><text x="32.3385%" y="399.50">rust-wordle-solver`&lt;core::slice..</text></g><g><title>rust-wordle-solver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (26 samples, 3.60%)</title><rect x="48.5477%" y="373" width="3.5961%" height="15" fill="rgb(227,97,0)" fg:x="351" fg:w="26"/><text x="48.7977%" y="383.50">rust..</text></g><g><title>rust-wordle-solver`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (14 samples, 1.94%)</title><rect x="52.1438%" y="389" width="1.9364%" height="15" fill="rgb(234,150,53)" fg:x="377" fg:w="14"/><text x="52.3938%" y="399.50">r..</text></g><g><title>rust-wordle-solver`core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.14%)</title><rect x="54.0802%" y="389" width="0.1383%" height="15" fill="rgb(228,201,54)" fg:x="391" fg:w="1"/><text x="54.3302%" y="399.50"></text></g><g><title>rust-wordle-solver`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (227 samples, 31.40%)</title><rect x="26.1411%" y="405" width="31.3970%" height="15" fill="rgb(222,22,37)" fg:x="189" fg:w="227"/><text x="26.3911%" y="415.50">rust-wordle-solver`&lt;core::slice::iter::Iter&lt;T&gt; as c..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::is_valid::_{{closure}} (24 samples, 3.32%)</title><rect x="54.2185%" y="389" width="3.3195%" height="15" fill="rgb(237,53,32)" fg:x="392" fg:w="24"/><text x="54.4685%" y="399.50">rus..</text></g><g><title>rust-wordle-solver`core::mem::replace (4 samples, 0.55%)</title><rect x="58.5062%" y="373" width="0.5533%" height="15" fill="rgb(233,25,53)" fg:x="423" fg:w="4"/><text x="58.7562%" y="383.50"></text></g><g><title>rust-wordle-solver`core::ptr::read (4 samples, 0.55%)</title><rect x="59.0595%" y="373" width="0.5533%" height="15" fill="rgb(210,40,34)" fg:x="427" fg:w="4"/><text x="59.3095%" y="383.50"></text></g><g><title>rust-wordle-solver`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (14 samples, 1.94%)</title><rect x="57.8147%" y="389" width="1.9364%" height="15" fill="rgb(241,220,44)" fg:x="418" fg:w="14"/><text x="58.0647%" y="399.50">r..</text></g><g><title>rust-wordle-solver`core::ptr::write (1 samples, 0.14%)</title><rect x="59.6127%" y="373" width="0.1383%" height="15" fill="rgb(235,28,35)" fg:x="431" fg:w="1"/><text x="59.8627%" y="383.50"></text></g><g><title>rust-wordle-solver`core::clone::impls::_&lt;impl core::clone::Clone for usize&gt;::clone (1 samples, 0.14%)</title><rect x="59.7510%" y="389" width="0.1383%" height="15" fill="rgb(210,56,17)" fg:x="432" fg:w="1"/><text x="60.0010%" y="399.50"></text></g><g><title>rust-wordle-solver`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (20 samples, 2.77%)</title><rect x="57.5380%" y="405" width="2.7663%" height="15" fill="rgb(224,130,29)" fg:x="416" fg:w="20"/><text x="57.7880%" y="415.50">ru..</text></g><g><title>rust-wordle-solver`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3 samples, 0.41%)</title><rect x="59.8893%" y="389" width="0.4149%" height="15" fill="rgb(235,212,8)" fg:x="433" fg:w="3"/><text x="60.1393%" y="399.50"></text></g><g><title>rust-wordle-solver`core::ptr::const_ptr::_&lt;impl *const T&gt;::addr (3 samples, 0.41%)</title><rect x="60.3043%" y="405" width="0.4149%" height="15" fill="rgb(223,33,50)" fg:x="436" fg:w="3"/><text x="60.5543%" y="415.50"></text></g><g><title>rust-wordle-solver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::addr (3 samples, 0.41%)</title><rect x="60.7192%" y="405" width="0.4149%" height="15" fill="rgb(219,149,13)" fg:x="439" fg:w="3"/><text x="60.9692%" y="415.50"></text></g><g><title>rust-wordle-solver`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.28%)</title><rect x="61.1342%" y="405" width="0.2766%" height="15" fill="rgb(250,156,29)" fg:x="442" fg:w="2"/><text x="61.3842%" y="415.50"></text></g><g><title>rust-wordle-solver`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (3 samples, 0.41%)</title><rect x="62.6556%" y="373" width="0.4149%" height="15" fill="rgb(216,193,19)" fg:x="453" fg:w="3"/><text x="62.9056%" y="383.50"></text></g><g><title>rust-wordle-solver`core::ptr::const_ptr::_&lt;impl *const T&gt;::guaranteed_eq (10 samples, 1.38%)</title><rect x="81.7427%" y="325" width="1.3831%" height="15" fill="rgb(216,135,14)" fg:x="591" fg:w="10"/><text x="81.9927%" y="335.50"></text></g><g><title>rust-wordle-solver`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (16 samples, 2.21%)</title><rect x="83.1259%" y="325" width="2.2130%" height="15" fill="rgb(241,47,5)" fg:x="601" fg:w="16"/><text x="83.3759%" y="335.50">r..</text></g><g><title>rust-wordle-solver`core::ptr::metadata::from_raw_parts (3 samples, 0.41%)</title><rect x="85.3389%" y="325" width="0.4149%" height="15" fill="rgb(233,42,35)" fg:x="617" fg:w="3"/><text x="85.5889%" y="335.50"></text></g><g><title>rust-wordle-solver`core::ptr::metadata::from_raw_parts_mut (4 samples, 0.55%)</title><rect x="85.7538%" y="325" width="0.5533%" height="15" fill="rgb(231,13,6)" fg:x="620" fg:w="4"/><text x="86.0038%" y="335.50"></text></g><g><title>rust-wordle-solver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (11 samples, 1.52%)</title><rect x="86.3071%" y="325" width="1.5214%" height="15" fill="rgb(207,181,40)" fg:x="624" fg:w="11"/><text x="86.5571%" y="335.50"></text></g><g><title>rust-wordle-solver`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (149 samples, 20.61%)</title><rect x="69.2946%" y="341" width="20.6086%" height="15" fill="rgb(254,173,49)" fg:x="501" fg:w="149"/><text x="69.5446%" y="351.50">rust-wordle-solver`&lt;core::slice:..</text></g><g><title>rust-wordle-solver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (15 samples, 2.07%)</title><rect x="87.8285%" y="325" width="2.0747%" height="15" fill="rgb(221,1,38)" fg:x="635" fg:w="15"/><text x="88.0785%" y="335.50">r..</text></g><g><title>rust-wordle-solver`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (12 samples, 1.66%)</title><rect x="89.9032%" y="341" width="1.6598%" height="15" fill="rgb(206,124,46)" fg:x="650" fg:w="12"/><text x="90.1532%" y="351.50"></text></g><g><title>rust-wordle-solver`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (206 samples, 28.49%)</title><rect x="63.6238%" y="357" width="28.4924%" height="15" fill="rgb(249,21,11)" fg:x="460" fg:w="206"/><text x="63.8738%" y="367.50">rust-wordle-solver`&lt;core::slice::iter::Iter&lt;T&gt;..</text></g><g><title>rust-wordle-solver`core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (4 samples, 0.55%)</title><rect x="91.5629%" y="341" width="0.5533%" height="15" fill="rgb(222,201,40)" fg:x="662" fg:w="4"/><text x="91.8129%" y="351.50"></text></g><g><title>rust-wordle-solver`core::ptr::const_ptr::_&lt;impl *const T&gt;::addr (1 samples, 0.14%)</title><rect x="92.1162%" y="357" width="0.1383%" height="15" fill="rgb(235,61,29)" fg:x="666" fg:w="1"/><text x="92.3662%" y="367.50"></text></g><g><title>rust-wordle-solver`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::addr (1 samples, 0.14%)</title><rect x="92.2545%" y="357" width="0.1383%" height="15" fill="rgb(219,207,3)" fg:x="667" fg:w="1"/><text x="92.5045%" y="367.50"></text></g><g><title>rust-wordle-solver`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.28%)</title><rect x="92.3928%" y="357" width="0.2766%" height="15" fill="rgb(222,56,46)" fg:x="668" fg:w="2"/><text x="92.6428%" y="367.50"></text></g><g><title>rust-wordle-solver`core::ptr::const_ptr::_&lt;impl *const T&gt;::guaranteed_eq (1 samples, 0.14%)</title><rect x="94.3292%" y="325" width="0.1383%" height="15" fill="rgb(239,76,54)" fg:x="682" fg:w="1"/><text x="94.5792%" y="335.50"></text></g><g><title>rust-wordle-solver`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (1 samples, 0.14%)</title><rect x="94.4675%" y="325" width="0.1383%" height="15" fill="rgb(231,124,27)" fg:x="683" fg:w="1"/><text x="94.7175%" y="335.50"></text></g><g><title>rust-wordle-solver`core::slice::_&lt;impl [T]&gt;::iter (18 samples, 2.49%)</title><rect x="92.6694%" y="357" width="2.4896%" height="15" fill="rgb(249,195,6)" fg:x="670" fg:w="18"/><text x="92.9194%" y="367.50">ru..</text></g><g><title>rust-wordle-solver`core::slice::iter::Iter&lt;T&gt;::new (18 samples, 2.49%)</title><rect x="92.6694%" y="341" width="2.4896%" height="15" fill="rgb(237,174,47)" fg:x="670" fg:w="18"/><text x="92.9194%" y="351.50">ru..</text></g><g><title>rust-wordle-solver`core::ptr::metadata::from_raw_parts (4 samples, 0.55%)</title><rect x="94.6058%" y="325" width="0.5533%" height="15" fill="rgb(206,201,31)" fg:x="684" fg:w="4"/><text x="94.8558%" y="335.50"></text></g><g><title>rust-wordle-solver`core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.14%)</title><rect x="95.1591%" y="357" width="0.1383%" height="15" fill="rgb(231,57,52)" fg:x="688" fg:w="1"/><text x="95.4091%" y="367.50"></text></g><g><title>rust-wordle-solver`core::slice::_&lt;impl [T]&gt;::contains (253 samples, 34.99%)</title><rect x="61.4108%" y="405" width="34.9931%" height="15" fill="rgb(248,177,22)" fg:x="444" fg:w="253"/><text x="61.6608%" y="415.50">rust-wordle-solver`core::slice::_&lt;impl [T]&gt;::contains</text></g><g><title>rust-wordle-solver`&lt;u8 as core::slice::cmp::SliceContains&gt;::slice_contains (251 samples, 34.72%)</title><rect x="61.6874%" y="389" width="34.7165%" height="15" fill="rgb(215,211,37)" fg:x="446" fg:w="251"/><text x="61.9374%" y="399.50">rust-wordle-solver`&lt;u8 as core::slice::cmp::SliceContain..</text></g><g><title>rust-wordle-solver`core::slice::memchr::memchr (241 samples, 33.33%)</title><rect x="63.0705%" y="373" width="33.3333%" height="15" fill="rgb(241,128,51)" fg:x="456" fg:w="241"/><text x="63.3205%" y="383.50">rust-wordle-solver`core::slice::memchr::memchr</text></g><g><title>rust-wordle-solver`core::slice::memchr::memchr::_{{closure}} (8 samples, 1.11%)</title><rect x="95.2974%" y="357" width="1.1065%" height="15" fill="rgb(227,165,31)" fg:x="689" fg:w="8"/><text x="95.5474%" y="367.50"></text></g><g><title>rust-wordle-solver`core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.14%)</title><rect x="96.8188%" y="389" width="0.1383%" height="15" fill="rgb(228,167,24)" fg:x="700" fg:w="1"/><text x="97.0688%" y="399.50"></text></g><g><title>rust-wordle-solver`core::slice::_&lt;impl [T]&gt;::as_ptr (2 samples, 0.28%)</title><rect x="96.9571%" y="389" width="0.2766%" height="15" fill="rgb(228,143,12)" fg:x="701" fg:w="2"/><text x="97.2071%" y="399.50"></text></g><g><title>rust-wordle-solver`core::ptr::const_ptr::_&lt;impl *const T&gt;::guaranteed_eq (2 samples, 0.28%)</title><rect x="98.8935%" y="373" width="0.2766%" height="15" fill="rgb(249,149,8)" fg:x="715" fg:w="2"/><text x="99.1435%" y="383.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::new (599 samples, 82.85%)</title><rect x="17.0124%" y="453" width="82.8492%" height="15" fill="rgb(243,35,44)" fg:x="123" fg:w="599"/><text x="17.2624%" y="463.50">rust-wordle-solver`rust_wordle_solver::fast::FastSolver::new</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::get_valid_cache (599 samples, 82.85%)</title><rect x="17.0124%" y="437" width="82.8492%" height="15" fill="rgb(246,89,9)" fg:x="123" fg:w="599"/><text x="17.2624%" y="447.50">rust-wordle-solver`rust_wordle_solver::fast::FastSolver::get_valid_cache</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::is_valid (557 samples, 77.04%)</title><rect x="22.8216%" y="421" width="77.0401%" height="15" fill="rgb(233,213,13)" fg:x="165" fg:w="557"/><text x="23.0716%" y="431.50">rust-wordle-solver`rust_wordle_solver::fast::FastSolver::is_valid</text></g><g><title>rust-wordle-solver`core::slice::_&lt;impl [T]&gt;::iter (25 samples, 3.46%)</title><rect x="96.4039%" y="405" width="3.4578%" height="15" fill="rgb(233,141,41)" fg:x="697" fg:w="25"/><text x="96.6539%" y="415.50">rus..</text></g><g><title>rust-wordle-solver`core::slice::iter::Iter&lt;T&gt;::new (19 samples, 2.63%)</title><rect x="97.2337%" y="389" width="2.6279%" height="15" fill="rgb(239,167,4)" fg:x="703" fg:w="19"/><text x="97.4837%" y="399.50">ru..</text></g><g><title>rust-wordle-solver`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (5 samples, 0.69%)</title><rect x="99.1701%" y="373" width="0.6916%" height="15" fill="rgb(209,217,16)" fg:x="717" fg:w="5"/><text x="99.4201%" y="383.50"></text></g><g><title>all (723 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(219,88,35)" fg:x="0" fg:w="723"/><text x="0.2500%" y="623.50"></text></g><g><title>dyld`start (723 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(220,193,23)" fg:x="0" fg:w="723"/><text x="0.2500%" y="607.50">dyld`start</text></g><g><title>rust-wordle-solver`main (722 samples, 99.86%)</title><rect x="0.1383%" y="581" width="99.8617%" height="15" fill="rgb(230,90,52)" fg:x="1" fg:w="722"/><text x="0.3883%" y="591.50">rust-wordle-solver`main</text></g><g><title>rust-wordle-solver`std::rt::lang_start (722 samples, 99.86%)</title><rect x="0.1383%" y="565" width="99.8617%" height="15" fill="rgb(252,106,19)" fg:x="1" fg:w="722"/><text x="0.3883%" y="575.50">rust-wordle-solver`std::rt::lang_start</text></g><g><title>rust-wordle-solver`std::rt::lang_start_internal (722 samples, 99.86%)</title><rect x="0.1383%" y="549" width="99.8617%" height="15" fill="rgb(206,74,20)" fg:x="1" fg:w="722"/><text x="0.3883%" y="559.50">rust-wordle-solver`std::rt::lang_start_internal</text></g><g><title>rust-wordle-solver`std::rt::lang_start::_{{closure}} (722 samples, 99.86%)</title><rect x="0.1383%" y="533" width="99.8617%" height="15" fill="rgb(230,138,44)" fg:x="1" fg:w="722"/><text x="0.3883%" y="543.50">rust-wordle-solver`std::rt::lang_start::_{{closure}}</text></g><g><title>rust-wordle-solver`std::sys_common::backtrace::__rust_begin_short_backtrace (722 samples, 99.86%)</title><rect x="0.1383%" y="517" width="99.8617%" height="15" fill="rgb(235,182,43)" fg:x="1" fg:w="722"/><text x="0.3883%" y="527.50">rust-wordle-solver`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust-wordle-solver`core::ops::function::FnOnce::call_once (722 samples, 99.86%)</title><rect x="0.1383%" y="501" width="99.8617%" height="15" fill="rgb(242,16,51)" fg:x="1" fg:w="722"/><text x="0.3883%" y="511.50">rust-wordle-solver`core::ops::function::FnOnce::call_once</text></g><g><title>rust-wordle-solver`rust_wordle_solver::main (722 samples, 99.86%)</title><rect x="0.1383%" y="485" width="99.8617%" height="15" fill="rgb(248,9,4)" fg:x="1" fg:w="722"/><text x="0.3883%" y="495.50">rust-wordle-solver`rust_wordle_solver::main</text></g><g><title>rust-wordle-solver`rust_wordle_solver::run_fast (722 samples, 99.86%)</title><rect x="0.1383%" y="469" width="99.8617%" height="15" fill="rgb(210,31,22)" fg:x="1" fg:w="722"/><text x="0.3883%" y="479.50">rust-wordle-solver`rust_wordle_solver::run_fast</text></g><g><title>rust-wordle-solver`rust_wordle_solver::words::get_words (1 samples, 0.14%)</title><rect x="99.8617%" y="453" width="0.1383%" height="15" fill="rgb(239,54,39)" fg:x="722" fg:w="1"/><text x="100.1117%" y="463.50"></text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::collect (1 samples, 0.14%)</title><rect x="99.8617%" y="437" width="0.1383%" height="15" fill="rgb(230,99,41)" fg:x="722" fg:w="1"/><text x="100.1117%" y="447.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.14%)</title><rect x="99.8617%" y="421" width="0.1383%" height="15" fill="rgb(253,106,12)" fg:x="722" fg:w="1"/><text x="100.1117%" y="431.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.14%)</title><rect x="99.8617%" y="405" width="0.1383%" height="15" fill="rgb(213,46,41)" fg:x="722" fg:w="1"/><text x="100.1117%" y="415.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.14%)</title><rect x="99.8617%" y="389" width="0.1383%" height="15" fill="rgb(215,133,35)" fg:x="722" fg:w="1"/><text x="100.1117%" y="399.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.14%)</title><rect x="99.8617%" y="373" width="0.1383%" height="15" fill="rgb(213,28,5)" fg:x="722" fg:w="1"/><text x="100.1117%" y="383.50"></text></g><g><title>rust-wordle-solver`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.14%)</title><rect x="99.8617%" y="357" width="0.1383%" height="15" fill="rgb(215,77,49)" fg:x="722" fg:w="1"/><text x="100.1117%" y="367.50"></text></g><g><title>rust-wordle-solver`&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="99.8617%" y="341" width="0.1383%" height="15" fill="rgb(248,100,22)" fg:x="722" fg:w="1"/><text x="100.1117%" y="351.50"></text></g><g><title>rust-wordle-solver`&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="99.8617%" y="325" width="0.1383%" height="15" fill="rgb(208,67,9)" fg:x="722" fg:w="1"/><text x="100.1117%" y="335.50"></text></g><g><title>rust-wordle-solver`&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="99.8617%" y="309" width="0.1383%" height="15" fill="rgb(219,133,21)" fg:x="722" fg:w="1"/><text x="100.1117%" y="319.50"></text></g><g><title>rust-wordle-solver`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (1 samples, 0.14%)</title><rect x="99.8617%" y="293" width="0.1383%" height="15" fill="rgb(246,46,29)" fg:x="722" fg:w="1"/><text x="100.1117%" y="303.50"></text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.14%)</title><rect x="99.8617%" y="277" width="0.1383%" height="15" fill="rgb(246,185,52)" fg:x="722" fg:w="1"/><text x="100.1117%" y="287.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::words::get_words::_{{closure}} (1 samples, 0.14%)</title><rect x="99.8617%" y="261" width="0.1383%" height="15" fill="rgb(252,136,11)" fg:x="722" fg:w="1"/><text x="100.1117%" y="271.50"></text></g><g><title>rust-wordle-solver`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.14%)</title><rect x="99.8617%" y="245" width="0.1383%" height="15" fill="rgb(219,138,53)" fg:x="722" fg:w="1"/><text x="100.1117%" y="255.50"></text></g><g><title>rust-wordle-solver`&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.14%)</title><rect x="99.8617%" y="229" width="0.1383%" height="15" fill="rgb(211,51,23)" fg:x="722" fg:w="1"/><text x="100.1117%" y="239.50"></text></g><g><title>rust-wordle-solver`&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.14%)</title><rect x="99.8617%" y="213" width="0.1383%" height="15" fill="rgb(247,221,28)" fg:x="722" fg:w="1"/><text x="100.1117%" y="223.50"></text></g><g><title>rust-wordle-solver`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.14%)</title><rect x="99.8617%" y="197" width="0.1383%" height="15" fill="rgb(251,222,45)" fg:x="722" fg:w="1"/><text x="100.1117%" y="207.50"></text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::for_each (1 samples, 0.14%)</title><rect x="99.8617%" y="181" width="0.1383%" height="15" fill="rgb(217,162,53)" fg:x="722" fg:w="1"/><text x="100.1117%" y="191.50"></text></g><g><title>rust-wordle-solver`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.14%)</title><rect x="99.8617%" y="165" width="0.1383%" height="15" fill="rgb(229,93,14)" fg:x="722" fg:w="1"/><text x="100.1117%" y="175.50"></text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::fold (1 samples, 0.14%)</title><rect x="99.8617%" y="149" width="0.1383%" height="15" fill="rgb(209,67,49)" fg:x="722" fg:w="1"/><text x="100.1117%" y="159.50"></text></g><g><title>rust-wordle-solver`core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.14%)</title><rect x="99.8617%" y="133" width="0.1383%" height="15" fill="rgb(213,87,29)" fg:x="722" fg:w="1"/><text x="100.1117%" y="143.50"></text></g><g><title>rust-wordle-solver`core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.14%)</title><rect x="99.8617%" y="117" width="0.1383%" height="15" fill="rgb(205,151,52)" fg:x="722" fg:w="1"/><text x="100.1117%" y="127.50"></text></g><g><title>rust-wordle-solver`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (1 samples, 0.14%)</title><rect x="99.8617%" y="101" width="0.1383%" height="15" fill="rgb(253,215,39)" fg:x="722" fg:w="1"/><text x="100.1117%" y="111.50"></text></g><g><title>rust-wordle-solver`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.14%)</title><rect x="99.8617%" y="85" width="0.1383%" height="15" fill="rgb(221,220,41)" fg:x="722" fg:w="1"/><text x="100.1117%" y="95.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.14%)</title><rect x="99.8617%" y="69" width="0.1383%" height="15" fill="rgb(218,133,21)" fg:x="722" fg:w="1"/><text x="100.1117%" y="79.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.14%)</title><rect x="99.8617%" y="53" width="0.1383%" height="15" fill="rgb(221,193,43)" fg:x="722" fg:w="1"/><text x="100.1117%" y="63.50"></text></g><g><title>rust-wordle-solver`&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.14%)</title><rect x="99.8617%" y="37" width="0.1383%" height="15" fill="rgb(240,128,52)" fg:x="722" fg:w="1"/><text x="100.1117%" y="47.50"></text></g></svg></svg>