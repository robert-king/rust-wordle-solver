<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="36918"><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.01%)</title><rect x="0.0000%" y="197" width="0.0135%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.01%)</title><rect x="0.0135%" y="197" width="0.0135%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="5"/><text x="0.2635%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.03%)</title><rect x="0.0433%" y="181" width="0.0325%" height="15" fill="rgb(221,193,54)" fg:x="16" fg:w="12"/><text x="0.2933%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.01%)</title><rect x="0.0786%" y="181" width="0.0108%" height="15" fill="rgb(248,212,6)" fg:x="29" fg:w="4"/><text x="0.3286%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.02%)</title><rect x="0.0894%" y="181" width="0.0190%" height="15" fill="rgb(208,68,35)" fg:x="33" fg:w="7"/><text x="0.3394%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.02%)</title><rect x="0.0921%" y="165" width="0.0163%" height="15" fill="rgb(232,128,0)" fg:x="34" fg:w="6"/><text x="0.3421%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (5 samples, 0.01%)</title><rect x="0.1083%" y="181" width="0.0135%" height="15" fill="rgb(207,160,47)" fg:x="40" fg:w="5"/><text x="0.3583%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (5 samples, 0.01%)</title><rect x="0.1083%" y="165" width="0.0135%" height="15" fill="rgb(228,23,34)" fg:x="40" fg:w="5"/><text x="0.3583%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.01%)</title><rect x="0.1083%" y="149" width="0.0135%" height="15" fill="rgb(218,30,26)" fg:x="40" fg:w="5"/><text x="0.3583%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (53 samples, 0.14%)</title><rect x="0.1219%" y="181" width="0.1436%" height="15" fill="rgb(220,122,19)" fg:x="45" fg:w="53"/><text x="0.3719%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (15 samples, 0.04%)</title><rect x="0.3278%" y="165" width="0.0406%" height="15" fill="rgb(250,228,42)" fg:x="121" fg:w="15"/><text x="0.5778%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.01%)</title><rect x="0.3684%" y="165" width="0.0108%" height="15" fill="rgb(240,193,28)" fg:x="136" fg:w="4"/><text x="0.6184%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (47 samples, 0.13%)</title><rect x="0.3792%" y="165" width="0.1273%" height="15" fill="rgb(216,20,37)" fg:x="140" fg:w="47"/><text x="0.6292%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (4 samples, 0.01%)</title><rect x="0.5065%" y="165" width="0.0108%" height="15" fill="rgb(206,188,39)" fg:x="187" fg:w="4"/><text x="0.7565%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (286 samples, 0.77%)</title><rect x="0.5282%" y="165" width="0.7747%" height="15" fill="rgb(217,207,13)" fg:x="195" fg:w="286"/><text x="0.7782%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.01%)</title><rect x="1.7715%" y="85" width="0.0135%" height="15" fill="rgb(231,73,38)" fg:x="654" fg:w="5"/><text x="2.0215%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.01%)</title><rect x="1.7959%" y="69" width="0.0135%" height="15" fill="rgb(225,20,46)" fg:x="663" fg:w="5"/><text x="2.0459%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (11 samples, 0.03%)</title><rect x="1.7932%" y="85" width="0.0298%" height="15" fill="rgb(210,31,41)" fg:x="662" fg:w="11"/><text x="2.0432%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.02%)</title><rect x="1.8392%" y="69" width="0.0163%" height="15" fill="rgb(221,200,47)" fg:x="679" fg:w="6"/><text x="2.0892%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (4 samples, 0.01%)</title><rect x="1.8446%" y="53" width="0.0108%" height="15" fill="rgb(226,26,5)" fg:x="681" fg:w="4"/><text x="2.0946%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (14 samples, 0.04%)</title><rect x="1.8230%" y="85" width="0.0379%" height="15" fill="rgb(249,33,26)" fg:x="673" fg:w="14"/><text x="2.0730%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (44 samples, 0.12%)</title><rect x="1.7634%" y="101" width="0.1192%" height="15" fill="rgb(235,183,28)" fg:x="651" fg:w="44"/><text x="2.0134%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.02%)</title><rect x="1.8609%" y="85" width="0.0217%" height="15" fill="rgb(221,5,38)" fg:x="687" fg:w="8"/><text x="2.1109%" y="95.50"></text></g><g><title>rust-wordle-solver`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (59 samples, 0.16%)</title><rect x="1.7309%" y="149" width="0.1598%" height="15" fill="rgb(247,18,42)" fg:x="639" fg:w="59"/><text x="1.9809%" y="159.50"></text></g><g><title>rust-wordle-solver`alloc::raw_vec::finish_grow (56 samples, 0.15%)</title><rect x="1.7390%" y="133" width="0.1517%" height="15" fill="rgb(241,131,45)" fg:x="642" fg:w="56"/><text x="1.9890%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (50 samples, 0.14%)</title><rect x="1.7552%" y="117" width="0.1354%" height="15" fill="rgb(249,31,29)" fg:x="648" fg:w="50"/><text x="2.0052%" y="127.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,039 samples, 8.23%)</title><rect x="1.3029%" y="165" width="8.2318%" height="15" fill="rgb(225,111,53)" fg:x="481" fg:w="3039"/><text x="1.5529%" y="175.50">rust-wordle..</text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2,822 samples, 7.64%)</title><rect x="1.8907%" y="149" width="7.6440%" height="15" fill="rgb(238,160,17)" fg:x="698" fg:w="2822"/><text x="2.1407%" y="159.50">rust-wordl..</text></g><g><title>rust-wordle-solver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (84 samples, 0.23%)</title><rect x="9.5346%" y="165" width="0.2275%" height="15" fill="rgb(214,148,48)" fg:x="3520" fg:w="84"/><text x="9.7846%" y="175.50"></text></g><g><title>rust-wordle-solver`DYLD-STUB$$free (10 samples, 0.03%)</title><rect x="9.7622%" y="165" width="0.0271%" height="15" fill="rgb(232,36,49)" fg:x="3604" fg:w="10"/><text x="10.0122%" y="175.50"></text></g><g><title>rust-wordle-solver`DYLD-STUB$$memcmp (35 samples, 0.09%)</title><rect x="9.7893%" y="165" width="0.0948%" height="15" fill="rgb(209,103,24)" fg:x="3614" fg:w="35"/><text x="10.0393%" y="175.50"></text></g><g><title>rust-wordle-solver`core::hash::BuildHasher::hash_one (38 samples, 0.10%)</title><rect x="9.8922%" y="165" width="0.1029%" height="15" fill="rgb(229,88,8)" fg:x="3652" fg:w="38"/><text x="10.1422%" y="175.50"></text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (191 samples, 0.52%)</title><rect x="9.9951%" y="165" width="0.5174%" height="15" fill="rgb(213,181,19)" fg:x="3690" fg:w="191"/><text x="10.2451%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (33 samples, 0.09%)</title><rect x="11.1247%" y="149" width="0.0894%" height="15" fill="rgb(254,191,54)" fg:x="4107" fg:w="33"/><text x="11.3747%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (96 samples, 0.26%)</title><rect x="11.2140%" y="149" width="0.2600%" height="15" fill="rgb(241,83,37)" fg:x="4140" fg:w="96"/><text x="11.4640%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (101 samples, 0.27%)</title><rect x="11.4768%" y="149" width="0.2736%" height="15" fill="rgb(233,36,39)" fg:x="4237" fg:w="101"/><text x="11.7268%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.02%)</title><rect x="11.7504%" y="149" width="0.0190%" height="15" fill="rgb(226,3,54)" fg:x="4338" fg:w="7"/><text x="12.0004%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.01%)</title><rect x="11.7585%" y="133" width="0.0108%" height="15" fill="rgb(245,192,40)" fg:x="4341" fg:w="4"/><text x="12.0085%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (40 samples, 0.11%)</title><rect x="11.7693%" y="149" width="0.1083%" height="15" fill="rgb(238,167,29)" fg:x="4345" fg:w="40"/><text x="12.0193%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (287 samples, 0.78%)</title><rect x="11.8831%" y="149" width="0.7774%" height="15" fill="rgb(232,182,51)" fg:x="4387" fg:w="287"/><text x="12.1331%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.01%)</title><rect x="15.3286%" y="117" width="0.0135%" height="15" fill="rgb(231,60,39)" fg:x="5659" fg:w="5"/><text x="15.5786%" y="127.50"></text></g><g><title>rust-wordle-solver`DYLD-STUB$$realloc (8 samples, 0.02%)</title><rect x="15.3421%" y="117" width="0.0217%" height="15" fill="rgb(208,69,12)" fg:x="5664" fg:w="8"/><text x="15.5921%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (28 samples, 0.08%)</title><rect x="15.3990%" y="101" width="0.0758%" height="15" fill="rgb(235,93,37)" fg:x="5685" fg:w="28"/><text x="15.6490%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (11 samples, 0.03%)</title><rect x="15.5534%" y="85" width="0.0298%" height="15" fill="rgb(213,116,39)" fg:x="5742" fg:w="11"/><text x="15.8034%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (5 samples, 0.01%)</title><rect x="15.6265%" y="69" width="0.0135%" height="15" fill="rgb(222,207,29)" fg:x="5769" fg:w="5"/><text x="15.8765%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.01%)</title><rect x="15.6401%" y="69" width="0.0135%" height="15" fill="rgb(206,96,30)" fg:x="5774" fg:w="5"/><text x="15.8901%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (28 samples, 0.08%)</title><rect x="15.6536%" y="69" width="0.0758%" height="15" fill="rgb(218,138,4)" fg:x="5779" fg:w="28"/><text x="15.9036%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (18 samples, 0.05%)</title><rect x="15.7295%" y="69" width="0.0488%" height="15" fill="rgb(250,191,14)" fg:x="5807" fg:w="18"/><text x="15.9795%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (43 samples, 0.12%)</title><rect x="15.8188%" y="53" width="0.1165%" height="15" fill="rgb(239,60,40)" fg:x="5840" fg:w="43"/><text x="16.0688%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (6 samples, 0.02%)</title><rect x="15.9353%" y="53" width="0.0163%" height="15" fill="rgb(206,27,48)" fg:x="5883" fg:w="6"/><text x="16.1853%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.01%)</title><rect x="15.9407%" y="37" width="0.0108%" height="15" fill="rgb(225,35,8)" fg:x="5885" fg:w="4"/><text x="16.1907%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (71 samples, 0.19%)</title><rect x="15.7782%" y="69" width="0.1923%" height="15" fill="rgb(250,213,24)" fg:x="5825" fg:w="71"/><text x="16.0282%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.02%)</title><rect x="15.9516%" y="53" width="0.0190%" height="15" fill="rgb(247,123,22)" fg:x="5889" fg:w="7"/><text x="16.2016%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.02%)</title><rect x="15.9516%" y="37" width="0.0190%" height="15" fill="rgb(231,138,38)" fg:x="5889" fg:w="7"/><text x="16.2016%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (171 samples, 0.46%)</title><rect x="15.5832%" y="85" width="0.4632%" height="15" fill="rgb(231,145,46)" fg:x="5753" fg:w="171"/><text x="15.8332%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (26 samples, 0.07%)</title><rect x="15.9759%" y="69" width="0.0704%" height="15" fill="rgb(251,118,11)" fg:x="5898" fg:w="26"/><text x="16.2259%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (6 samples, 0.02%)</title><rect x="16.0464%" y="85" width="0.0163%" height="15" fill="rgb(217,147,25)" fg:x="5924" fg:w="6"/><text x="16.2964%" y="95.50"></text></g><g><title>rust-wordle-solver`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (282 samples, 0.76%)</title><rect x="15.3015%" y="133" width="0.7639%" height="15" fill="rgb(247,81,37)" fg:x="5649" fg:w="282"/><text x="15.5515%" y="143.50"></text></g><g><title>rust-wordle-solver`alloc::raw_vec::finish_grow (257 samples, 0.70%)</title><rect x="15.3692%" y="117" width="0.6961%" height="15" fill="rgb(209,12,38)" fg:x="5674" fg:w="257"/><text x="15.6192%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (218 samples, 0.59%)</title><rect x="15.4748%" y="101" width="0.5905%" height="15" fill="rgb(227,1,9)" fg:x="5713" fg:w="218"/><text x="15.7248%" y="111.50"></text></g><g><title>rust-wordle-solver`alloc::raw_vec::finish_grow (9 samples, 0.02%)</title><rect x="16.0653%" y="133" width="0.0244%" height="15" fill="rgb(248,47,43)" fg:x="5931" fg:w="9"/><text x="16.3153%" y="143.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17,941 samples, 48.60%)</title><rect x="12.6605%" y="149" width="48.5969%" height="15" fill="rgb(221,10,30)" fg:x="4674" fg:w="17941"/><text x="12.9105%" y="159.50">rust-wordle-solver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIt..</text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (16,675 samples, 45.17%)</title><rect x="16.0897%" y="133" width="45.1677%" height="15" fill="rgb(210,229,1)" fg:x="5940" fg:w="16675"/><text x="16.3397%" y="143.50">rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function:..</text></g><g><title>rust-wordle-solver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (345 samples, 0.93%)</title><rect x="61.2574%" y="149" width="0.9345%" height="15" fill="rgb(222,148,37)" fg:x="22615" fg:w="345"/><text x="61.5074%" y="159.50"></text></g><g><title>rust-wordle-solver`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (21 samples, 0.06%)</title><rect x="62.1919%" y="149" width="0.0569%" height="15" fill="rgb(234,67,33)" fg:x="22960" fg:w="21"/><text x="62.4419%" y="159.50"></text></g><g><title>rust-wordle-solver`DYLD-STUB$$free (28 samples, 0.08%)</title><rect x="62.2488%" y="149" width="0.0758%" height="15" fill="rgb(247,98,35)" fg:x="22981" fg:w="28"/><text x="62.4988%" y="159.50"></text></g><g><title>rust-wordle-solver`DYLD-STUB$$malloc (4 samples, 0.01%)</title><rect x="62.3246%" y="149" width="0.0108%" height="15" fill="rgb(247,138,52)" fg:x="23009" fg:w="4"/><text x="62.5746%" y="159.50"></text></g><g><title>rust-wordle-solver`DYLD-STUB$$memcmp (33 samples, 0.09%)</title><rect x="62.3354%" y="149" width="0.0894%" height="15" fill="rgb(213,79,30)" fg:x="23013" fg:w="33"/><text x="62.5854%" y="159.50"></text></g><g><title>rust-wordle-solver`__rdl_alloc (4 samples, 0.01%)</title><rect x="62.4248%" y="149" width="0.0108%" height="15" fill="rgb(246,177,23)" fg:x="23046" fg:w="4"/><text x="62.6748%" y="159.50"></text></g><g><title>rust-wordle-solver`core::hash::BuildHasher::hash_one (168 samples, 0.46%)</title><rect x="62.4438%" y="149" width="0.4551%" height="15" fill="rgb(230,62,27)" fg:x="23053" fg:w="168"/><text x="62.6938%" y="159.50"></text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1,178 samples, 3.19%)</title><rect x="62.8989%" y="149" width="3.1909%" height="15" fill="rgb(216,154,8)" fg:x="23221" fg:w="1178"/><text x="63.1489%" y="159.50">rus..</text></g><g><title>rust-wordle-solver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (19 samples, 0.05%)</title><rect x="66.0924%" y="133" width="0.0515%" height="15" fill="rgb(244,35,45)" fg:x="24400" fg:w="19"/><text x="66.3424%" y="143.50"></text></g><g><title>rust-wordle-solver`core::hash::BuildHasher::hash_one (9 samples, 0.02%)</title><rect x="66.1466%" y="133" width="0.0244%" height="15" fill="rgb(251,115,12)" fg:x="24420" fg:w="9"/><text x="66.3966%" y="143.50"></text></g><g><title>rust-wordle-solver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (72 samples, 0.20%)</title><rect x="66.1954%" y="101" width="0.1950%" height="15" fill="rgb(240,54,50)" fg:x="24438" fg:w="72"/><text x="66.4454%" y="111.50"></text></g><g><title>rust-wordle-solver`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (122 samples, 0.33%)</title><rect x="66.0897%" y="149" width="0.3305%" height="15" fill="rgb(233,84,52)" fg:x="24399" fg:w="122"/><text x="66.3397%" y="159.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::RawTable&lt;T,A&gt;::insert (92 samples, 0.25%)</title><rect x="66.1710%" y="133" width="0.2492%" height="15" fill="rgb(207,117,47)" fg:x="24429" fg:w="92"/><text x="66.4210%" y="143.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (89 samples, 0.24%)</title><rect x="66.1791%" y="117" width="0.2411%" height="15" fill="rgb(249,43,39)" fg:x="24432" fg:w="89"/><text x="66.4291%" y="127.50"></text></g><g><title>rust-wordle-solver`core::hash::BuildHasher::hash_one (11 samples, 0.03%)</title><rect x="66.3904%" y="101" width="0.0298%" height="15" fill="rgb(209,38,44)" fg:x="24510" fg:w="11"/><text x="66.6404%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (99 samples, 0.27%)</title><rect x="67.0025%" y="133" width="0.2682%" height="15" fill="rgb(236,212,23)" fg:x="24736" fg:w="99"/><text x="67.2525%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (174 samples, 0.47%)</title><rect x="67.2707%" y="133" width="0.4713%" height="15" fill="rgb(242,79,21)" fg:x="24835" fg:w="174"/><text x="67.5207%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.03%)</title><rect x="67.7420%" y="133" width="0.0298%" height="15" fill="rgb(211,96,35)" fg:x="25009" fg:w="11"/><text x="67.9920%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (120 samples, 0.33%)</title><rect x="67.7718%" y="133" width="0.3250%" height="15" fill="rgb(253,215,40)" fg:x="25020" fg:w="120"/><text x="68.0218%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (32 samples, 0.09%)</title><rect x="68.0969%" y="133" width="0.0867%" height="15" fill="rgb(211,81,21)" fg:x="25140" fg:w="32"/><text x="68.3469%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.01%)</title><rect x="69.7925%" y="85" width="0.0135%" height="15" fill="rgb(208,190,38)" fg:x="25766" fg:w="5"/><text x="70.0425%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.01%)</title><rect x="69.8467%" y="53" width="0.0108%" height="15" fill="rgb(235,213,38)" fg:x="25786" fg:w="4"/><text x="70.0967%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.04%)</title><rect x="69.8575%" y="53" width="0.0352%" height="15" fill="rgb(237,122,38)" fg:x="25790" fg:w="13"/><text x="70.1075%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.02%)</title><rect x="69.8927%" y="53" width="0.0217%" height="15" fill="rgb(244,218,35)" fg:x="25803" fg:w="8"/><text x="70.1427%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (16 samples, 0.04%)</title><rect x="69.9144%" y="53" width="0.0433%" height="15" fill="rgb(240,68,47)" fg:x="25811" fg:w="16"/><text x="70.1644%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.03%)</title><rect x="69.9252%" y="37" width="0.0325%" height="15" fill="rgb(210,16,53)" fg:x="25815" fg:w="12"/><text x="70.1752%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (48 samples, 0.13%)</title><rect x="69.8386%" y="69" width="0.1300%" height="15" fill="rgb(235,124,12)" fg:x="25783" fg:w="48"/><text x="70.0886%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.01%)</title><rect x="69.9577%" y="53" width="0.0108%" height="15" fill="rgb(224,169,11)" fg:x="25827" fg:w="4"/><text x="70.2077%" y="63.50"></text></g><g><title>rust-wordle-solver`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (74 samples, 0.20%)</title><rect x="69.7736%" y="117" width="0.2004%" height="15" fill="rgb(250,166,2)" fg:x="25759" fg:w="74"/><text x="70.0236%" y="127.50"></text></g><g><title>rust-wordle-solver`alloc::raw_vec::finish_grow (69 samples, 0.19%)</title><rect x="69.7871%" y="101" width="0.1869%" height="15" fill="rgb(242,216,29)" fg:x="25764" fg:w="69"/><text x="70.0371%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (62 samples, 0.17%)</title><rect x="69.8061%" y="85" width="0.1679%" height="15" fill="rgb(230,116,27)" fg:x="25771" fg:w="62"/><text x="70.0561%" y="95.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10,209 samples, 27.65%)</title><rect x="68.1835%" y="133" width="27.6532%" height="15" fill="rgb(228,99,48)" fg:x="25172" fg:w="10209"/><text x="68.4335%" y="143.50">rust-wordle-solver`&lt;alloc::vec::Vec&lt;T&gt; as al..</text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (9,546 samples, 25.86%)</title><rect x="69.9794%" y="117" width="25.8573%" height="15" fill="rgb(253,11,6)" fg:x="25835" fg:w="9546"/><text x="70.2294%" y="127.50">rust-wordle-solver`core::ops::function::i..</text></g><g><title>rust-wordle-solver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (172 samples, 0.47%)</title><rect x="95.8367%" y="133" width="0.4659%" height="15" fill="rgb(247,143,39)" fg:x="35381" fg:w="172"/><text x="96.0867%" y="143.50"></text></g><g><title>rust-wordle-solver`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.04%)</title><rect x="96.3026%" y="133" width="0.0406%" height="15" fill="rgb(236,97,10)" fg:x="35553" fg:w="15"/><text x="96.5526%" y="143.50"></text></g><g><title>rust-wordle-solver`DYLD-STUB$$malloc (15 samples, 0.04%)</title><rect x="96.3487%" y="133" width="0.0406%" height="15" fill="rgb(233,208,19)" fg:x="35570" fg:w="15"/><text x="96.5987%" y="143.50"></text></g><g><title>rust-wordle-solver`__rdl_alloc (37 samples, 0.10%)</title><rect x="96.3974%" y="133" width="0.1002%" height="15" fill="rgb(216,164,2)" fg:x="35588" fg:w="37"/><text x="96.6474%" y="143.50"></text></g><g><title>rust-wordle-solver`core::hash::BuildHasher::hash_one (67 samples, 0.18%)</title><rect x="96.5004%" y="133" width="0.1815%" height="15" fill="rgb(220,129,5)" fg:x="35626" fg:w="67"/><text x="96.7504%" y="143.50"></text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (502 samples, 1.36%)</title><rect x="96.6818%" y="133" width="1.3598%" height="15" fill="rgb(242,17,10)" fg:x="35693" fg:w="502"/><text x="96.9318%" y="143.50"></text></g><g><title>rust-wordle-solver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.01%)</title><rect x="98.0470%" y="117" width="0.0135%" height="15" fill="rgb(242,107,0)" fg:x="36197" fg:w="5"/><text x="98.2970%" y="127.50"></text></g><g><title>rust-wordle-solver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (31 samples, 0.08%)</title><rect x="98.0714%" y="85" width="0.0840%" height="15" fill="rgb(251,28,31)" fg:x="36206" fg:w="31"/><text x="98.3214%" y="95.50"></text></g><g><title>rust-wordle-solver`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (44 samples, 0.12%)</title><rect x="98.0416%" y="133" width="0.1192%" height="15" fill="rgb(233,223,10)" fg:x="36195" fg:w="44"/><text x="98.2916%" y="143.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::RawTable&lt;T,A&gt;::insert (35 samples, 0.09%)</title><rect x="98.0660%" y="117" width="0.0948%" height="15" fill="rgb(215,21,27)" fg:x="36204" fg:w="35"/><text x="98.3160%" y="127.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (35 samples, 0.09%)</title><rect x="98.0660%" y="101" width="0.0948%" height="15" fill="rgb(232,23,21)" fg:x="36204" fg:w="35"/><text x="98.3160%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.02%)</title><rect x="98.2014%" y="117" width="0.0217%" height="15" fill="rgb(244,5,23)" fg:x="36254" fg:w="8"/><text x="98.4514%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.03%)</title><rect x="98.2231%" y="117" width="0.0325%" height="15" fill="rgb(226,81,46)" fg:x="36262" fg:w="12"/><text x="98.4731%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.02%)</title><rect x="98.2556%" y="117" width="0.0244%" height="15" fill="rgb(247,70,30)" fg:x="36274" fg:w="9"/><text x="98.5056%" y="127.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (571 samples, 1.55%)</title><rect x="98.2800%" y="117" width="1.5467%" height="15" fill="rgb(212,68,19)" fg:x="36283" fg:w="571"/><text x="98.5300%" y="127.50"></text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (532 samples, 1.44%)</title><rect x="98.3856%" y="101" width="1.4410%" height="15" fill="rgb(240,187,13)" fg:x="36322" fg:w="532"/><text x="98.6356%" y="111.50"></text></g><g><title>rust-wordle-solver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20 samples, 0.05%)</title><rect x="99.8266%" y="117" width="0.0542%" height="15" fill="rgb(223,113,26)" fg:x="36854" fg:w="20"/><text x="100.0766%" y="127.50"></text></g><g><title>rust-wordle-solver`__rdl_alloc (4 samples, 0.01%)</title><rect x="99.8944%" y="117" width="0.0108%" height="15" fill="rgb(206,192,2)" fg:x="36879" fg:w="4"/><text x="100.1444%" y="127.50"></text></g><g><title>rust-wordle-solver`core::hash::BuildHasher::hash_one (6 samples, 0.02%)</title><rect x="99.9052%" y="117" width="0.0163%" height="15" fill="rgb(241,108,4)" fg:x="36883" fg:w="6"/><text x="100.1552%" y="127.50"></text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (22 samples, 0.06%)</title><rect x="99.9214%" y="117" width="0.0596%" height="15" fill="rgb(247,173,49)" fg:x="36889" fg:w="22"/><text x="100.1714%" y="127.50"></text></g><g><title>rust-wordle-solver`std::rt::lang_start::_{{closure}} (36,914 samples, 99.99%)</title><rect x="0.0000%" y="229" width="99.9892%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="36914"/><text x="0.2500%" y="239.50">rust-wordle-solver`std::rt::lang_start::_{{closure}}</text></g><g><title>rust-wordle-solver`std::sys_common::backtrace::__rust_begin_short_backtrace (36,914 samples, 99.99%)</title><rect x="0.0000%" y="213" width="99.9892%" height="15" fill="rgb(245,159,27)" fg:x="0" fg:w="36914"/><text x="0.2500%" y="223.50">rust-wordle-solver`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust-wordle-solver`rust_wordle_solver::main (36,904 samples, 99.96%)</title><rect x="0.0271%" y="197" width="99.9621%" height="15" fill="rgb(245,172,44)" fg:x="10" fg:w="36904"/><text x="0.2771%" y="207.50">rust-wordle-solver`rust_wordle_solver::main</text></g><g><title>rust-wordle-solver`rust_wordle_solver::simple::evaluate_guess (36,813 samples, 99.72%)</title><rect x="0.2736%" y="181" width="99.7156%" height="15" fill="rgb(236,23,11)" fg:x="101" fg:w="36813"/><text x="0.5236%" y="191.50">rust-wordle-solver`rust_wordle_solver::simple::evaluate_guess</text></g><g><title>rust-wordle-solver`rust_wordle_solver::simple::evaluate_guess (33,030 samples, 89.47%)</title><rect x="10.5206%" y="165" width="89.4686%" height="15" fill="rgb(205,117,38)" fg:x="3884" fg:w="33030"/><text x="10.7706%" y="175.50">rust-wordle-solver`rust_wordle_solver::simple::evaluate_guess</text></g><g><title>rust-wordle-solver`rust_wordle_solver::simple::evaluate_guess (12,393 samples, 33.57%)</title><rect x="66.4202%" y="149" width="33.5690%" height="15" fill="rgb(237,72,25)" fg:x="24521" fg:w="12393"/><text x="66.6702%" y="159.50">rust-wordle-solver`rust_wordle_solver::simple::evaluat..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::simple::evaluate_guess (675 samples, 1.83%)</title><rect x="98.1608%" y="133" width="1.8284%" height="15" fill="rgb(244,70,9)" fg:x="36239" fg:w="675"/><text x="98.4108%" y="143.50">r..</text></g><g><title>dyld`start (36,915 samples, 99.99%)</title><rect x="0.0000%" y="277" width="99.9919%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="36915"/><text x="0.2500%" y="287.50">dyld`start</text></g><g><title>rust-wordle-solver`main (36,915 samples, 99.99%)</title><rect x="0.0000%" y="261" width="99.9919%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="36915"/><text x="0.2500%" y="271.50">rust-wordle-solver`main</text></g><g><title>rust-wordle-solver`std::rt::lang_start_internal (36,915 samples, 99.99%)</title><rect x="0.0000%" y="245" width="99.9919%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="36915"/><text x="0.2500%" y="255.50">rust-wordle-solver`std::rt::lang_start_internal</text></g><g><title>all (36,918 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="36918"/><text x="0.2500%" y="303.50"></text></g></svg></svg>