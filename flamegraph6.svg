<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="25888"><g><title>libsystem_malloc.dylib`_szone_free (35 samples, 0.14%)</title><rect x="0.0039%" y="277" width="0.1352%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="35"/><text x="0.2539%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_large (35 samples, 0.14%)</title><rect x="0.0039%" y="261" width="0.1352%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="35"/><text x="0.2539%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (35 samples, 0.14%)</title><rect x="0.0039%" y="245" width="0.1352%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="35"/><text x="0.2539%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (35 samples, 0.14%)</title><rect x="0.0039%" y="229" width="0.1352%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="35"/><text x="0.2539%" y="239.50"></text></g><g><title>rust-wordle-solver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11 samples, 0.04%)</title><rect x="11.3991%" y="229" width="0.0425%" height="15" fill="rgb(208,68,35)" fg:x="2951" fg:w="11"/><text x="11.6491%" y="239.50"></text></g><g><title>rust-wordle-solver`core::hash::BuildHasher::hash_one (34 samples, 0.13%)</title><rect x="11.4416%" y="229" width="0.1313%" height="15" fill="rgb(232,128,0)" fg:x="2962" fg:w="34"/><text x="11.6916%" y="239.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::RawTable&lt;T,A&gt;::insert (13 samples, 0.05%)</title><rect x="11.5729%" y="229" width="0.0502%" height="15" fill="rgb(207,160,47)" fg:x="2996" fg:w="13"/><text x="11.8229%" y="239.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.03%)</title><rect x="11.5961%" y="213" width="0.0270%" height="15" fill="rgb(228,23,34)" fg:x="3002" fg:w="7"/><text x="11.8461%" y="223.50"></text></g><g><title>rust-wordle-solver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (41 samples, 0.16%)</title><rect x="28.9980%" y="213" width="0.1584%" height="15" fill="rgb(218,30,26)" fg:x="7507" fg:w="41"/><text x="29.2480%" y="223.50"></text></g><g><title>rust-wordle-solver`core::hash::BuildHasher::hash_one (95 samples, 0.37%)</title><rect x="29.1564%" y="213" width="0.3670%" height="15" fill="rgb(220,122,19)" fg:x="7548" fg:w="95"/><text x="29.4064%" y="223.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::RawTable&lt;T,A&gt;::insert (15 samples, 0.06%)</title><rect x="29.5233%" y="213" width="0.0579%" height="15" fill="rgb(250,228,42)" fg:x="7643" fg:w="15"/><text x="29.7733%" y="223.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (10 samples, 0.04%)</title><rect x="29.5426%" y="197" width="0.0386%" height="15" fill="rgb(240,193,28)" fg:x="7648" fg:w="10"/><text x="29.7926%" y="207.50"></text></g><g><title>rust-wordle-solver`core::hash::BuildHasher::hash_one (4 samples, 0.02%)</title><rect x="29.5658%" y="181" width="0.0155%" height="15" fill="rgb(216,20,37)" fg:x="7654" fg:w="4"/><text x="29.8158%" y="191.50"></text></g><g><title>rust-wordle-solver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.05%)</title><rect x="31.9646%" y="197" width="0.0502%" height="15" fill="rgb(206,188,39)" fg:x="8275" fg:w="13"/><text x="32.2146%" y="207.50"></text></g><g><title>rust-wordle-solver`core::hash::BuildHasher::hash_one (22 samples, 0.08%)</title><rect x="32.0148%" y="197" width="0.0850%" height="15" fill="rgb(217,207,13)" fg:x="8288" fg:w="22"/><text x="32.2648%" y="207.50"></text></g><g><title>rust-wordle-solver`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.01%)</title><rect x="32.2582%" y="181" width="0.0116%" height="15" fill="rgb(231,73,38)" fg:x="8351" fg:w="3"/><text x="32.5082%" y="191.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guesses (8,322 samples, 32.15%)</title><rect x="0.1429%" y="277" width="32.1462%" height="15" fill="rgb(225,20,46)" fg:x="37" fg:w="8322"/><text x="0.3929%" y="287.50">rust-wordle-solver`rust_wordle_solver::fast::FastSol..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (8,322 samples, 32.15%)</title><rect x="0.1429%" y="261" width="32.1462%" height="15" fill="rgb(210,31,41)" fg:x="37" fg:w="8322"/><text x="0.3929%" y="271.50">rust-wordle-solver`rust_wordle_solver::fast::FastSol..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (8,124 samples, 31.38%)</title><rect x="0.9078%" y="245" width="31.3813%" height="15" fill="rgb(221,200,47)" fg:x="235" fg:w="8124"/><text x="1.1578%" y="255.50">rust-wordle-solver`rust_wordle_solver::fast::FastSo..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (5,350 samples, 20.67%)</title><rect x="11.6231%" y="229" width="20.6659%" height="15" fill="rgb(226,26,5)" fg:x="3009" fg:w="5350"/><text x="11.8731%" y="239.50">rust-wordle-solver`rust_wordle_so..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (701 samples, 2.71%)</title><rect x="29.5813%" y="213" width="2.7078%" height="15" fill="rgb(249,33,26)" fg:x="7658" fg:w="701"/><text x="29.8313%" y="223.50">ru..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (49 samples, 0.19%)</title><rect x="32.0998%" y="197" width="0.1893%" height="15" fill="rgb(235,183,28)" fg:x="8310" fg:w="49"/><text x="32.3498%" y="207.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (4 samples, 0.02%)</title><rect x="32.2736%" y="181" width="0.0155%" height="15" fill="rgb(221,5,38)" fg:x="8355" fg:w="4"/><text x="32.5236%" y="191.50"></text></g><g><title>dyld`start (18,204 samples, 70.32%)</title><rect x="0.0000%" y="389" width="70.3183%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="18204"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>rust-wordle-solver`main (18,204 samples, 70.32%)</title><rect x="0.0000%" y="373" width="70.3183%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="18204"/><text x="0.2500%" y="383.50">rust-wordle-solver`main</text></g><g><title>rust-wordle-solver`std::rt::lang_start_internal (18,204 samples, 70.32%)</title><rect x="0.0000%" y="357" width="70.3183%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="18204"/><text x="0.2500%" y="367.50">rust-wordle-solver`std::rt::lang_start_internal</text></g><g><title>rust-wordle-solver`std::rt::lang_start::_{{closure}} (18,203 samples, 70.31%)</title><rect x="0.0039%" y="341" width="70.3144%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="18203"/><text x="0.2539%" y="351.50">rust-wordle-solver`std::rt::lang_start::_{{closure}}</text></g><g><title>rust-wordle-solver`std::sys_common::backtrace::__rust_begin_short_backtrace (18,203 samples, 70.31%)</title><rect x="0.0039%" y="325" width="70.3144%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="18203"/><text x="0.2539%" y="335.50">rust-wordle-solver`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust-wordle-solver`rust_wordle_solver::main (18,203 samples, 70.31%)</title><rect x="0.0039%" y="309" width="70.3144%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="18203"/><text x="0.2539%" y="319.50">rust-wordle-solver`rust_wordle_solver::main</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::anneal (18,203 samples, 70.31%)</title><rect x="0.0039%" y="293" width="70.3144%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="18203"/><text x="0.2539%" y="303.50">rust-wordle-solver`rust_wordle_solver::fast::FastSolver::anneal</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::new (9,845 samples, 38.03%)</title><rect x="32.2891%" y="277" width="38.0292%" height="15" fill="rgb(209,103,24)" fg:x="8359" fg:w="9845"/><text x="32.5391%" y="287.50">rust-wordle-solver`rust_wordle_solver::fast::FastSolver::new</text></g><g><title>libsystem_kernel.dylib`swtch_pri (5 samples, 0.02%)</title><rect x="70.3299%" y="277" width="0.0193%" height="15" fill="rgb(229,88,8)" fg:x="18207" fg:w="5"/><text x="70.5799%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.02%)</title><rect x="70.3492%" y="181" width="0.0155%" height="15" fill="rgb(213,181,19)" fg:x="18212" fg:w="4"/><text x="70.5992%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (4 samples, 0.02%)</title><rect x="70.3492%" y="165" width="0.0155%" height="15" fill="rgb(254,191,54)" fg:x="18212" fg:w="4"/><text x="70.5992%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (4 samples, 0.02%)</title><rect x="70.3492%" y="149" width="0.0155%" height="15" fill="rgb(241,83,37)" fg:x="18212" fg:w="4"/><text x="70.5992%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.02%)</title><rect x="70.3492%" y="133" width="0.0155%" height="15" fill="rgb(233,36,39)" fg:x="18212" fg:w="4"/><text x="70.5992%" y="143.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guesses (127 samples, 0.49%)</title><rect x="70.3646%" y="181" width="0.4906%" height="15" fill="rgb(226,3,54)" fg:x="18216" fg:w="127"/><text x="70.6146%" y="191.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (127 samples, 0.49%)</title><rect x="70.3646%" y="165" width="0.4906%" height="15" fill="rgb(245,192,40)" fg:x="18216" fg:w="127"/><text x="70.6146%" y="175.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (123 samples, 0.48%)</title><rect x="70.3801%" y="149" width="0.4751%" height="15" fill="rgb(238,167,29)" fg:x="18220" fg:w="123"/><text x="70.6301%" y="159.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (33 samples, 0.13%)</title><rect x="70.7278%" y="133" width="0.1275%" height="15" fill="rgb(232,182,51)" fg:x="18310" fg:w="33"/><text x="70.9778%" y="143.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (760 samples, 2.94%)</title><rect x="70.3492%" y="213" width="2.9357%" height="15" fill="rgb(231,60,39)" fg:x="18212" fg:w="760"/><text x="70.5992%" y="223.50">ru..</text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (760 samples, 2.94%)</title><rect x="70.3492%" y="197" width="2.9357%" height="15" fill="rgb(208,69,12)" fg:x="18212" fg:w="760"/><text x="70.5992%" y="207.50">ru..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::new (629 samples, 2.43%)</title><rect x="70.8552%" y="181" width="2.4297%" height="15" fill="rgb(235,93,37)" fg:x="18343" fg:w="629"/><text x="71.1052%" y="191.50">ru..</text></g><g><title>rust-wordle-solver`hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.01%)</title><rect x="73.6635%" y="85" width="0.0116%" height="15" fill="rgb(213,116,39)" fg:x="19070" fg:w="3"/><text x="73.9135%" y="95.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guesses (119 samples, 0.46%)</title><rect x="73.2926%" y="133" width="0.4597%" height="15" fill="rgb(222,207,29)" fg:x="18974" fg:w="119"/><text x="73.5426%" y="143.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (118 samples, 0.46%)</title><rect x="73.2965%" y="117" width="0.4558%" height="15" fill="rgb(206,96,30)" fg:x="18975" fg:w="118"/><text x="73.5465%" y="127.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (105 samples, 0.41%)</title><rect x="73.3467%" y="101" width="0.4056%" height="15" fill="rgb(218,138,4)" fg:x="18988" fg:w="105"/><text x="73.5967%" y="111.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (20 samples, 0.08%)</title><rect x="73.6751%" y="85" width="0.0773%" height="15" fill="rgb(250,191,14)" fg:x="19073" fg:w="20"/><text x="73.9251%" y="95.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (482 samples, 1.86%)</title><rect x="73.2849%" y="165" width="1.8619%" height="15" fill="rgb(239,60,40)" fg:x="18972" fg:w="482"/><text x="73.5349%" y="175.50">r..</text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (482 samples, 1.86%)</title><rect x="73.2849%" y="149" width="1.8619%" height="15" fill="rgb(206,27,48)" fg:x="18972" fg:w="482"/><text x="73.5349%" y="159.50">r..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::new (361 samples, 1.39%)</title><rect x="73.7523%" y="133" width="1.3945%" height="15" fill="rgb(225,35,8)" fg:x="19093" fg:w="361"/><text x="74.0023%" y="143.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guesses (14 samples, 0.05%)</title><rect x="75.1468%" y="69" width="0.0541%" height="15" fill="rgb(250,213,24)" fg:x="19454" fg:w="14"/><text x="75.3968%" y="79.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (14 samples, 0.05%)</title><rect x="75.1468%" y="53" width="0.0541%" height="15" fill="rgb(247,123,22)" fg:x="19454" fg:w="14"/><text x="75.3968%" y="63.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (10 samples, 0.04%)</title><rect x="75.1622%" y="37" width="0.0386%" height="15" fill="rgb(231,138,38)" fg:x="19458" fg:w="10"/><text x="75.4122%" y="47.50"></text></g><g><title>rust-wordle-solver`rayon_core::registry::WorkerThread::wait_until_cold (26 samples, 0.10%)</title><rect x="75.1468%" y="149" width="0.1004%" height="15" fill="rgb(231,145,46)" fg:x="19454" fg:w="26"/><text x="75.3968%" y="159.50"></text></g><g><title>rust-wordle-solver`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (26 samples, 0.10%)</title><rect x="75.1468%" y="133" width="0.1004%" height="15" fill="rgb(251,118,11)" fg:x="19454" fg:w="26"/><text x="75.3968%" y="143.50"></text></g><g><title>rust-wordle-solver`rayon::iter::plumbing::bridge_producer_consumer::helper (26 samples, 0.10%)</title><rect x="75.1468%" y="117" width="0.1004%" height="15" fill="rgb(217,147,25)" fg:x="19454" fg:w="26"/><text x="75.3968%" y="127.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (26 samples, 0.10%)</title><rect x="75.1468%" y="101" width="0.1004%" height="15" fill="rgb(247,81,37)" fg:x="19454" fg:w="26"/><text x="75.3968%" y="111.50"></text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (26 samples, 0.10%)</title><rect x="75.1468%" y="85" width="0.1004%" height="15" fill="rgb(209,12,38)" fg:x="19454" fg:w="26"/><text x="75.3968%" y="95.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::new (12 samples, 0.05%)</title><rect x="75.2009%" y="69" width="0.0464%" height="15" fill="rgb(227,1,9)" fg:x="19468" fg:w="12"/><text x="75.4509%" y="79.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guesses (21 samples, 0.08%)</title><rect x="75.2511%" y="85" width="0.0811%" height="15" fill="rgb(248,47,43)" fg:x="19481" fg:w="21"/><text x="75.5011%" y="95.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (21 samples, 0.08%)</title><rect x="75.2511%" y="69" width="0.0811%" height="15" fill="rgb(221,10,30)" fg:x="19481" fg:w="21"/><text x="75.5011%" y="79.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (17 samples, 0.07%)</title><rect x="75.2665%" y="53" width="0.0657%" height="15" fill="rgb(210,229,1)" fg:x="19485" fg:w="17"/><text x="75.5165%" y="63.50"></text></g><g><title>rust-wordle-solver`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,297 samples, 5.01%)</title><rect x="70.3492%" y="261" width="5.0100%" height="15" fill="rgb(222,148,37)" fg:x="18212" fg:w="1297"/><text x="70.5992%" y="271.50">rust-w..</text></g><g><title>rust-wordle-solver`std::panicking::try (1,297 samples, 5.01%)</title><rect x="70.3492%" y="245" width="5.0100%" height="15" fill="rgb(234,67,33)" fg:x="18212" fg:w="1297"/><text x="70.5992%" y="255.50">rust-w..</text></g><g><title>rust-wordle-solver`rayon::iter::plumbing::bridge_producer_consumer::helper (1,297 samples, 5.01%)</title><rect x="70.3492%" y="229" width="5.0100%" height="15" fill="rgb(247,98,35)" fg:x="18212" fg:w="1297"/><text x="70.5992%" y="239.50">rust-w..</text></g><g><title>rust-wordle-solver`rayon_core::registry::in_worker (537 samples, 2.07%)</title><rect x="73.2849%" y="213" width="2.0743%" height="15" fill="rgb(247,138,52)" fg:x="18972" fg:w="537"/><text x="73.5349%" y="223.50">r..</text></g><g><title>rust-wordle-solver`std::panicking::try (537 samples, 2.07%)</title><rect x="73.2849%" y="197" width="2.0743%" height="15" fill="rgb(213,79,30)" fg:x="18972" fg:w="537"/><text x="73.5349%" y="207.50">r..</text></g><g><title>rust-wordle-solver`rayon::iter::plumbing::bridge_producer_consumer::helper (537 samples, 2.07%)</title><rect x="73.2849%" y="181" width="2.0743%" height="15" fill="rgb(246,177,23)" fg:x="18972" fg:w="537"/><text x="73.5349%" y="191.50">r..</text></g><g><title>rust-wordle-solver`rayon_core::registry::in_worker (55 samples, 0.21%)</title><rect x="75.1468%" y="165" width="0.2125%" height="15" fill="rgb(230,62,27)" fg:x="19454" fg:w="55"/><text x="75.3968%" y="175.50"></text></g><g><title>rust-wordle-solver`std::panicking::try (29 samples, 0.11%)</title><rect x="75.2472%" y="149" width="0.1120%" height="15" fill="rgb(216,154,8)" fg:x="19480" fg:w="29"/><text x="75.4972%" y="159.50"></text></g><g><title>rust-wordle-solver`rayon::iter::plumbing::bridge_producer_consumer::helper (29 samples, 0.11%)</title><rect x="75.2472%" y="133" width="0.1120%" height="15" fill="rgb(244,35,45)" fg:x="19480" fg:w="29"/><text x="75.4972%" y="143.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (29 samples, 0.11%)</title><rect x="75.2472%" y="117" width="0.1120%" height="15" fill="rgb(251,115,12)" fg:x="19480" fg:w="29"/><text x="75.4972%" y="127.50"></text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (28 samples, 0.11%)</title><rect x="75.2511%" y="101" width="0.1082%" height="15" fill="rgb(240,54,50)" fg:x="19481" fg:w="28"/><text x="75.5011%" y="111.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::new (7 samples, 0.03%)</title><rect x="75.3322%" y="85" width="0.0270%" height="15" fill="rgb(233,84,52)" fg:x="19502" fg:w="7"/><text x="75.5822%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.01%)</title><rect x="75.3592%" y="213" width="0.0116%" height="15" fill="rgb(207,117,47)" fg:x="19509" fg:w="3"/><text x="75.6092%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.01%)</title><rect x="75.3592%" y="197" width="0.0116%" height="15" fill="rgb(249,43,39)" fg:x="19509" fg:w="3"/><text x="75.6092%" y="207.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::RawTable&lt;T,A&gt;::insert (4 samples, 0.02%)</title><rect x="76.1009%" y="165" width="0.0155%" height="15" fill="rgb(209,38,44)" fg:x="19701" fg:w="4"/><text x="76.3509%" y="175.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.01%)</title><rect x="76.1048%" y="149" width="0.0116%" height="15" fill="rgb(236,212,23)" fg:x="19702" fg:w="3"/><text x="76.3548%" y="159.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guesses (239 samples, 0.92%)</title><rect x="75.3708%" y="213" width="0.9232%" height="15" fill="rgb(242,79,21)" fg:x="19512" fg:w="239"/><text x="75.6208%" y="223.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (238 samples, 0.92%)</title><rect x="75.3747%" y="197" width="0.9193%" height="15" fill="rgb(211,96,35)" fg:x="19513" fg:w="238"/><text x="75.6247%" y="207.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (193 samples, 0.75%)</title><rect x="75.5485%" y="181" width="0.7455%" height="15" fill="rgb(253,215,40)" fg:x="19558" fg:w="193"/><text x="75.7985%" y="191.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (46 samples, 0.18%)</title><rect x="76.1163%" y="165" width="0.1777%" height="15" fill="rgb(211,81,21)" fg:x="19705" fg:w="46"/><text x="76.3663%" y="175.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (809 samples, 3.12%)</title><rect x="75.3592%" y="245" width="3.1250%" height="15" fill="rgb(208,190,38)" fg:x="19509" fg:w="809"/><text x="75.6092%" y="255.50">rus..</text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (809 samples, 3.12%)</title><rect x="75.3592%" y="229" width="3.1250%" height="15" fill="rgb(235,213,38)" fg:x="19509" fg:w="809"/><text x="75.6092%" y="239.50">rus..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::new (567 samples, 2.19%)</title><rect x="76.2940%" y="213" width="2.1902%" height="15" fill="rgb(237,122,38)" fg:x="19751" fg:w="567"/><text x="76.5440%" y="223.50">r..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="78.4727%" y="197" width="0.0116%" height="15" fill="rgb(244,218,35)" fg:x="20315" fg:w="3"/><text x="78.7227%" y="207.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guesses (14 samples, 0.05%)</title><rect x="78.4842%" y="101" width="0.0541%" height="15" fill="rgb(240,68,47)" fg:x="20318" fg:w="14"/><text x="78.7342%" y="111.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (14 samples, 0.05%)</title><rect x="78.4842%" y="85" width="0.0541%" height="15" fill="rgb(210,16,53)" fg:x="20318" fg:w="14"/><text x="78.7342%" y="95.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (9 samples, 0.03%)</title><rect x="78.5036%" y="69" width="0.0348%" height="15" fill="rgb(235,124,12)" fg:x="20323" fg:w="9"/><text x="78.7536%" y="79.50"></text></g><g><title>rust-wordle-solver`rayon_core::registry::WorkerThread::wait_until_cold (28 samples, 0.11%)</title><rect x="78.4842%" y="229" width="0.1082%" height="15" fill="rgb(224,169,11)" fg:x="20318" fg:w="28"/><text x="78.7342%" y="239.50"></text></g><g><title>rust-wordle-solver`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (28 samples, 0.11%)</title><rect x="78.4842%" y="213" width="0.1082%" height="15" fill="rgb(250,166,2)" fg:x="20318" fg:w="28"/><text x="78.7342%" y="223.50"></text></g><g><title>rust-wordle-solver`rayon::iter::plumbing::bridge_producer_consumer::helper (28 samples, 0.11%)</title><rect x="78.4842%" y="197" width="0.1082%" height="15" fill="rgb(242,216,29)" fg:x="20318" fg:w="28"/><text x="78.7342%" y="207.50"></text></g><g><title>rust-wordle-solver`rayon_core::registry::in_worker (28 samples, 0.11%)</title><rect x="78.4842%" y="181" width="0.1082%" height="15" fill="rgb(230,116,27)" fg:x="20318" fg:w="28"/><text x="78.7342%" y="191.50"></text></g><g><title>rust-wordle-solver`std::panicking::try (28 samples, 0.11%)</title><rect x="78.4842%" y="165" width="0.1082%" height="15" fill="rgb(228,99,48)" fg:x="20318" fg:w="28"/><text x="78.7342%" y="175.50"></text></g><g><title>rust-wordle-solver`rayon::iter::plumbing::bridge_producer_consumer::helper (28 samples, 0.11%)</title><rect x="78.4842%" y="149" width="0.1082%" height="15" fill="rgb(253,11,6)" fg:x="20318" fg:w="28"/><text x="78.7342%" y="159.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (28 samples, 0.11%)</title><rect x="78.4842%" y="133" width="0.1082%" height="15" fill="rgb(247,143,39)" fg:x="20318" fg:w="28"/><text x="78.7342%" y="143.50"></text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (28 samples, 0.11%)</title><rect x="78.4842%" y="117" width="0.1082%" height="15" fill="rgb(236,97,10)" fg:x="20318" fg:w="28"/><text x="78.7342%" y="127.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::new (14 samples, 0.05%)</title><rect x="78.5383%" y="101" width="0.0541%" height="15" fill="rgb(233,208,19)" fg:x="20332" fg:w="14"/><text x="78.7883%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.02%)</title><rect x="78.6001%" y="165" width="0.0155%" height="15" fill="rgb(216,164,2)" fg:x="20348" fg:w="4"/><text x="78.8501%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (3 samples, 0.01%)</title><rect x="78.6040%" y="149" width="0.0116%" height="15" fill="rgb(220,129,5)" fg:x="20349" fg:w="3"/><text x="78.8540%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (3 samples, 0.01%)</title><rect x="78.6040%" y="133" width="0.0116%" height="15" fill="rgb(242,17,10)" fg:x="20349" fg:w="3"/><text x="78.8540%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (3 samples, 0.01%)</title><rect x="78.6040%" y="117" width="0.0116%" height="15" fill="rgb(242,107,0)" fg:x="20349" fg:w="3"/><text x="78.8540%" y="127.50"></text></g><g><title>rust-wordle-solver`core::hash::BuildHasher::hash_one (12 samples, 0.05%)</title><rect x="79.9289%" y="117" width="0.0464%" height="15" fill="rgb(251,28,31)" fg:x="20692" fg:w="12"/><text x="80.1789%" y="127.50"></text></g><g><title>rust-wordle-solver`hashbrown::raw::RawTable&lt;T,A&gt;::insert (5 samples, 0.02%)</title><rect x="79.9753%" y="117" width="0.0193%" height="15" fill="rgb(233,223,10)" fg:x="20704" fg:w="5"/><text x="80.2253%" y="127.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guesses (461 samples, 1.78%)</title><rect x="78.6156%" y="165" width="1.7807%" height="15" fill="rgb(215,21,27)" fg:x="20352" fg:w="461"/><text x="78.8656%" y="175.50">r..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (459 samples, 1.77%)</title><rect x="78.6233%" y="149" width="1.7730%" height="15" fill="rgb(232,23,21)" fg:x="20354" fg:w="459"/><text x="78.8733%" y="159.50">r..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (398 samples, 1.54%)</title><rect x="78.8589%" y="133" width="1.5374%" height="15" fill="rgb(244,5,23)" fg:x="20415" fg:w="398"/><text x="79.1089%" y="143.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (104 samples, 0.40%)</title><rect x="79.9946%" y="117" width="0.4017%" height="15" fill="rgb(226,81,46)" fg:x="20709" fg:w="104"/><text x="80.2446%" y="127.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (6 samples, 0.02%)</title><rect x="80.3731%" y="101" width="0.0232%" height="15" fill="rgb(247,70,30)" fg:x="20807" fg:w="6"/><text x="80.6231%" y="111.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,680 samples, 6.49%)</title><rect x="78.5924%" y="197" width="6.4895%" height="15" fill="rgb(212,68,19)" fg:x="20346" fg:w="1680"/><text x="78.8424%" y="207.50">rust-wor..</text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,678 samples, 6.48%)</title><rect x="78.6001%" y="181" width="6.4818%" height="15" fill="rgb(240,187,13)" fg:x="20348" fg:w="1678"/><text x="78.8501%" y="191.50">rust-wor..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::new (1,213 samples, 4.69%)</title><rect x="80.3963%" y="165" width="4.6856%" height="15" fill="rgb(223,113,26)" fg:x="20813" fg:w="1213"/><text x="80.6463%" y="175.50">rust-..</text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guesses (18 samples, 0.07%)</title><rect x="85.0819%" y="117" width="0.0695%" height="15" fill="rgb(206,192,2)" fg:x="22026" fg:w="18"/><text x="85.3319%" y="127.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (18 samples, 0.07%)</title><rect x="85.0819%" y="101" width="0.0695%" height="15" fill="rgb(241,108,4)" fg:x="22026" fg:w="18"/><text x="85.3319%" y="111.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::evaluate_guess (10 samples, 0.04%)</title><rect x="85.1128%" y="85" width="0.0386%" height="15" fill="rgb(247,173,49)" fg:x="22034" fg:w="10"/><text x="85.3628%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (3,839 samples, 14.83%)</title><rect x="70.3299%" y="389" width="14.8293%" height="15" fill="rgb(224,114,35)" fg:x="18207" fg:w="3839"/><text x="70.5799%" y="399.50">libsystem_pthread.dylib..</text></g><g><title>libsystem_pthread.dylib`_pthread_start (3,839 samples, 14.83%)</title><rect x="70.3299%" y="373" width="14.8293%" height="15" fill="rgb(245,159,27)" fg:x="18207" fg:w="3839"/><text x="70.5799%" y="383.50">libsystem_pthread.dylib..</text></g><g><title>rust-wordle-solver`std::sys::unix::thread::Thread::new::thread_start (3,839 samples, 14.83%)</title><rect x="70.3299%" y="357" width="14.8293%" height="15" fill="rgb(245,172,44)" fg:x="18207" fg:w="3839"/><text x="70.5799%" y="367.50">rust-wordle-solver`std:..</text></g><g><title>rust-wordle-solver`core::ops::function::FnOnce::call_once{{vtable.shim}} (3,839 samples, 14.83%)</title><rect x="70.3299%" y="341" width="14.8293%" height="15" fill="rgb(236,23,11)" fg:x="18207" fg:w="3839"/><text x="70.5799%" y="351.50">rust-wordle-solver`core..</text></g><g><title>rust-wordle-solver`std::sys_common::backtrace::__rust_begin_short_backtrace (3,839 samples, 14.83%)</title><rect x="70.3299%" y="325" width="14.8293%" height="15" fill="rgb(205,117,38)" fg:x="18207" fg:w="3839"/><text x="70.5799%" y="335.50">rust-wordle-solver`std:..</text></g><g><title>rust-wordle-solver`rayon_core::registry::ThreadBuilder::run (3,839 samples, 14.83%)</title><rect x="70.3299%" y="309" width="14.8293%" height="15" fill="rgb(237,72,25)" fg:x="18207" fg:w="3839"/><text x="70.5799%" y="319.50">rust-wordle-solver`rayo..</text></g><g><title>rust-wordle-solver`rayon_core::registry::WorkerThread::wait_until_cold (3,839 samples, 14.83%)</title><rect x="70.3299%" y="293" width="14.8293%" height="15" fill="rgb(244,70,9)" fg:x="18207" fg:w="3839"/><text x="70.5799%" y="303.50">rust-wordle-solver`rayo..</text></g><g><title>rust-wordle-solver`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (3,834 samples, 14.81%)</title><rect x="70.3492%" y="277" width="14.8100%" height="15" fill="rgb(217,125,39)" fg:x="18212" fg:w="3834"/><text x="70.5992%" y="287.50">rust-wordle-solver`&lt;ray..</text></g><g><title>rust-wordle-solver`rayon::iter::plumbing::bridge_producer_consumer::helper (2,537 samples, 9.80%)</title><rect x="75.3592%" y="261" width="9.7999%" height="15" fill="rgb(235,36,10)" fg:x="19509" fg:w="2537"/><text x="75.6092%" y="271.50">rust-wordle-so..</text></g><g><title>rust-wordle-solver`rayon_core::registry::in_worker (1,728 samples, 6.67%)</title><rect x="78.4842%" y="245" width="6.6749%" height="15" fill="rgb(251,123,47)" fg:x="20318" fg:w="1728"/><text x="78.7342%" y="255.50">rust-word..</text></g><g><title>rust-wordle-solver`std::panicking::try (1,700 samples, 6.57%)</title><rect x="78.5924%" y="229" width="6.5667%" height="15" fill="rgb(221,13,13)" fg:x="20346" fg:w="1700"/><text x="78.8424%" y="239.50">rust-word..</text></g><g><title>rust-wordle-solver`rayon::iter::plumbing::bridge_producer_consumer::helper (1,700 samples, 6.57%)</title><rect x="78.5924%" y="213" width="6.5667%" height="15" fill="rgb(238,131,9)" fg:x="20346" fg:w="1700"/><text x="78.8424%" y="223.50">rust-word..</text></g><g><title>rust-wordle-solver`rayon_core::registry::in_worker (20 samples, 0.08%)</title><rect x="85.0819%" y="197" width="0.0773%" height="15" fill="rgb(211,50,8)" fg:x="22026" fg:w="20"/><text x="85.3319%" y="207.50"></text></g><g><title>rust-wordle-solver`std::panicking::try (20 samples, 0.08%)</title><rect x="85.0819%" y="181" width="0.0773%" height="15" fill="rgb(245,182,24)" fg:x="22026" fg:w="20"/><text x="85.3319%" y="191.50"></text></g><g><title>rust-wordle-solver`rayon::iter::plumbing::bridge_producer_consumer::helper (20 samples, 0.08%)</title><rect x="85.0819%" y="165" width="0.0773%" height="15" fill="rgb(242,14,37)" fg:x="22026" fg:w="20"/><text x="85.3319%" y="175.50"></text></g><g><title>rust-wordle-solver`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (20 samples, 0.08%)</title><rect x="85.0819%" y="149" width="0.0773%" height="15" fill="rgb(246,228,12)" fg:x="22026" fg:w="20"/><text x="85.3319%" y="159.50"></text></g><g><title>rust-wordle-solver`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (20 samples, 0.08%)</title><rect x="85.0819%" y="133" width="0.0773%" height="15" fill="rgb(213,55,15)" fg:x="22026" fg:w="20"/><text x="85.3319%" y="143.50"></text></g><g><title>all (25,888 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(209,9,3)" fg:x="0" fg:w="25888"/><text x="0.2500%" y="415.50"></text></g><g><title>rust-wordle-solver`rust_wordle_solver::fast::FastSolver::new (3,842 samples, 14.84%)</title><rect x="85.1591%" y="389" width="14.8409%" height="15" fill="rgb(230,59,30)" fg:x="22046" fg:w="3842"/><text x="85.4091%" y="399.50">rust-wordle-solver`rust..</text></g></svg></svg>